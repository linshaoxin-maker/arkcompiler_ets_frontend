/*
 * Copyright (c) 2024 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import assert from 'assert';
export type h<T> = () => T;
export type i<T extends h<T>> = () => T;
type j = () => j;
let a: i<() => j>;
a = () => a;
assert(a() === a);
let k: number = 1;
typeof k;
type l = typeof k;
let m: l = 1;
assert(m === 1);
let c: [
    string,
    number,
    boolean
] = ["", 1, false];
assert(c[0] === "");
assert(c[1] === 1);
assert(c[2] === false);
type a = [
    number,
    string,
    ...number[]
];
let o: number | string = 1;
assert(o === 1);
let p: number & (string | number) = 1;
assert(p === 1);
type q = number;
type t = string;
function g<c3>(d3: c3 extends q ? q : t) { return d3; }
assert(g<number>(1) === 1);
type u<T> = T extends {
    a: infer U;
    b: infer U;
} ? U : never;
let x: u<{
    a: number;
    b: number;
}> = 1;
assert(x === 1);
let v: (string | number)[] = [1, 2];
assert(v[0] === 1);
assert(v[1] === 2);
interface a1 {
    name: string;
    c3: number;
}
type b1 = keyof a1;
let b: b1 = "name";
assert(b === "name");
// Different grammar scenarios of indexedAccessType
type c1 = {
    d3: number;
    e3: string;
    f3: boolean;
};
type d1 = {
    g3: c1;
};
let e1: d1["g3"]["d3"] = 2;
assert(e1 === 2);
let q: c1["d3"] = 3;
let t: c1["e3"] = "test";
let f1: c1["f3"] = false;
assert(q === 3);
assert(t === "test");
assert(f1 === false);
let g1: c1["d3" | "e3"] = 4;
let h1: c1["d3" | "e3"] = "test";
assert(g1 === 4);
assert(h1 === "test");
let i1: d1["g3"]["d3" | "e3"] = 5;
let j1: d1["g3"]["d3" | "e3"] = "test";
assert(i1 === 5);
assert(j1 === "test");
let l1: c1[keyof d1["g3"]] = 6;
assert(l1 === 6);
const m1 = [
    { h3: "Alice", i3: 15 },
    { h3: "Bob", i3: 23 },
    { h3: "Eve", i3: 38 },
];
type n1 = (typeof m1)[1]["i3"];
let o1: n1 = 7;
assert(o1 === 7);
type q1 = [
    string,
    number
];
let s1: q1[0] = "test";
let t1: q1[1] = 9;
assert(s1 === "test");
assert(t1 === 9);
type u1<T extends any[]> = {
    [P in keyof T]: T[P];
};
let d: u1<number[]> = [1];
assert(d[0] === 1);
let v1: "cc" = "cc";
assert(v1 === "cc");
let w1: [
    prop1: string,
    prop2: number
] = ["1", 2];
assert(w1[0] === "1");
assert(w1[1] === 2);
// Defination of unionType
type z1 = "123" | "321";
type a2 = 1234 | 4321;
type b2 = "3124" | 4123;
type c2 = "U1234" | 2143;
type d2 = "U4213" | "U4132";
type e2 = "U3412" | "3421";
let f2: z1["1234"] = "1";
assert(f2 === "1");
let g2: z1[4321] = "2";
assert(g2 === "2");
let h2: d2[4321] = "3";
assert(h2 === "3");
let i2: d2["1234"] = "4";
assert(i2 === "4");
let j2: e2[4321] = "5";
assert(j2 === "5");
let l2: e2["1234"] = "6";
assert(l2 === "6");
// Define properties in type individually
type m2 = {
    "j3": number;
    l3: number;
    "m3": number;
    1324: number;
    [2143]: number;
    ["2314"]: number;
};
// Define properties in type and access them using indexedAccessType
type n2 = {
    "q3": number;
    r3: number;
    "s3": number;
    1243: number;
    [2134]: number;
    ["v3"]: number;
    // need to add in whitelist
    "3142": number;
    1432: number;
    [1423]: number;
    ["2314"]: number;
};
let o2: n2["q3"] = 1;
assert(o2 === 1);
let q2: n2["r3"] = 2;
assert(q2 === 2);
let s2: n2["s3"] = 3;
assert(s2 === 3);
let t2: n2[1243] = 4;
assert(t2 === 4);
let u2: n2[2134] = 5;
assert(u2 === 5);
let v2: n2["v3"] = 6;
assert(v2 === 6);
// need to add in whitelist
let w2: n2[3142] = 7;
assert(w2 === 7);
let z2: n2["1432"] = 8;
assert(z2 === 8);
let a3: n2["1423"] = 9;
assert(a3 === 9);
let b3: n2[2314] = 10;
assert(b3 === 10);

/*
 * Copyright (c) 2024 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import assert from 'assert';
export type callback<T> = () => T;
export type CallbackArray<T extends callback<T>> = () => T;
type t = () => t;
let a: CallbackArray<() => t>;
a = () => a;
assert(a() === a);
let h: number = 1;
typeof h;
type i = typeof h;
let j: i = 1;
assert(j === 1);
let c: [
    string,
    number,
    boolean
] = ["", 1, false];
assert(c[0] === "");
assert(c[1] === 1);
assert(c[2] === false);
type a = [
    number,
    string,
    ...number[]
];
let k: number | string = 1;
assert(k === 1);
let l: number & (string | number) = 1;
assert(l === 1);
type m = number;
type o = string;
function g<b3>(c3: b3 extends m ? m : o) { return c3; }
assert(g<number>(1) === 1);
type p<T> = T extends {
    a: infer U;
    b: infer U;
} ? U : never;
let x: p<{
    a: number;
    b: number;
}> = 1;
assert(x === 1);
let q: (string | number)[] = [1, 2];
assert(q[0] === 1);
assert(q[1] === 2);
interface u {
    name: string;
    b3: number;
}
type v = keyof u;
let b: v = "name";
assert(b === "name");
// Different grammar scenarios of indexedAccessType
type a1 = {
    U: number;
    V: string;
    W: boolean;
};
type b1 = {
    X1: a1;
};
let c1: b1["X1"]['U'] = 2;
assert(c1 === 2);
let m: a1['U'] = 3;
let o: a1['V'] = "test";
let d1: a1['W'] = false;
assert(m === 3);
assert(o === "test");
assert(d1 === false);
let e1: a1["U" | "V"] = 4;
let f1: a1["U" | "V"] = "test";
assert(e1 === 4);
assert(f1 === "test");
let g1: b1["X1"]["U" | "V"] = 5;
let h1: b1["X1"]["U" | "V"] = "test";
assert(g1 === 5);
assert(h1 === "test");
let i1: a1[keyof b1["X1"]] = 6;
assert(i1 === 6);
const j1 = [
    { c3: "Alice", m1: 15 },
    { c3: "Bob", m1: 23 },
    { c3: "Eve", m1: 38 },
];
type l1 = (typeof j1)[1]["m1"];
let n1: l1 = 7;
assert(n1 === 7);
type o1 = [
    string,
    number
];
let q1: o1[0] = "test";
let s1: o1[1] = 9;
assert(q1 === "test");
assert(s1 === 9);
type t1<T extends any[]> = {
    [P in keyof T]: T[P];
};
let d: t1<number[]> = [1];
assert(d[0] === 1);
let u1: "cc" = "cc";
assert(u1 === "cc");
let v1: [
    prop1: string,
    prop2: number
] = ["1", 2];
assert(v1[0] === "1");
assert(v1[1] === 2);
// Defination of unionType
type w1 = "123" | "321";
type z1 = 1234 | 4321;
type a2 = "3124" | 4123;
type b2 = "U1234" | 2143;
type c2 = "U4213" | "U4132";
type d2 = "U3412" | "3421";
let e2: w1["1234"] = "1";
assert(e2 === "1");
let f2: w1[4321] = "2";
assert(f2 === "2");
let g2: c2[4321] = "3";
assert(g2 === "3");
let h2: c2["1234"] = "4";
assert(h2 === "4");
let i2: d2[4321] = "5";
assert(i2 === "5");
let j2: d2["1234"] = "6";
assert(j2 === "6");
// Define properties in type individually
type l2 = {
    "prop3": number;
    d3: number;
    "3214": number;
    1324: number;
    [2143]: number;
    ["2314"]: number;
};
// Define properties in type and access them using indexedAccessType
type m2 = {
    "prop5": number;
    prop6: number;
    "3412": number;
    1243: number;
    [2134]: number;
    ["2341"]: number;
    // need to add in whitelist
    "3142": number;
    1432: number;
    [1423]: number;
    ["2314"]: number;
};
let n2: m2["prop5"] = 1;
assert(n2 === 1);
let o2: m2["prop6"] = 2;
assert(o2 === 2);
let q2: m2["3412"] = 3;
assert(q2 === 3);
let s2: m2[1243] = 4;
assert(s2 === 4);
let t2: m2[2134] = 5;
assert(t2 === 5);
let u2: m2["2341"] = 6;
assert(u2 === 6);
// need to add in whitelist
let v2: m2[3142] = 7;
assert(v2 === 7);
let w2: m2["1432"] = 8;
assert(w2 === 8);
let z2: m2["1423"] = 9;
assert(z2 === 9);
let a3: m2[2314] = 10;
assert(a3 === 10);

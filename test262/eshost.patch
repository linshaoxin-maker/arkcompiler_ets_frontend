diff --git a/lib/Agent.js b/lib/Agent.js
index edcdf0e..7e655c5 100644
--- a/lib/Agent.js
+++ b/lib/Agent.js
@@ -7,6 +7,7 @@ class Agent {
     this.args = options.hostArguments || [];
     this.transform = options.transform || (x => x);
     this.out = options.out || '';
+    this.test262Dir = options.test262Dir;
 
     if (typeof this.args === 'string') {
       this.args = this.args.includes(' ') ?
diff --git a/lib/ConsoleAgent.js b/lib/ConsoleAgent.js
index 947c1db..18de7a3 100644
--- a/lib/ConsoleAgent.js
+++ b/lib/ConsoleAgent.js
@@ -19,7 +19,7 @@ const {
 const cpSym = Symbol.for('cp');
 const tpSym = Symbol.for('tp');
 
-function generateTempFileName() {
+function generateTempFileName(file) {
   const now = Date.now();
   return `f-${now}-${process.pid}-${(Math.random() * 0x100000000 + 1).toString(36)}.js`;
 }
@@ -47,9 +47,32 @@ class ConsoleAgent extends Agent {
     }
   }
 
+  genTempFileName(code){
+    let file = code.file;
+    let tmps = file.split(this.test262Dir);
+    let tempfile = path.join(this.out,tmps[1]);
+    tempfile = tempfile.substring(0,tempfile.indexOf('.js'));
+
+    if (file.includes("built-ins/Set/set.js")) {
+      let scenario = code.scenario === 'strict mode' ? 'strict' : code.scenario;
+      tempfile = path.normalize(
+        `${tempfile}-${scenario}.js`
+      );
+    } else {
+      let scenario = code.scenario === 'strict mode' ? '' : code.scenario;
+      tempfile = path.normalize(
+        `${tempfile}${scenario}.js`
+      );
+    }
+
+    return tempfile;
+  }
+
   evalScript(code, options = {}) {
-    let tempfile = path.join(this[tpSym], generateTempFileName());
-    let temppath = this[tpSym];
+
+    let tempfile = this.genTempFileName(code);
+    //let tempfile = path.join(this.out, generateTempFileName(code.file));
+    let temppath = this.out;
 
     let isExpectingRawSource = false;
     let hasDependencies = false;
@@ -57,10 +80,10 @@ class ConsoleAgent extends Agent {
     const sources = [];
     const dependencies = [];
 
-    if (this.out) {
-      tempfile = tempfile.replace(temppath, this.out);
-      temppath = this.out;
-    }
+    // if (this.out) {
+    //   tempfile = tempfile.replace(temppath, this.out);
+    //   temppath = this.out;
+    // }
 
     // When evalScript is called with a test262-stream test record:
     if (typeof code === 'object' && code.contents) {
@@ -84,12 +107,12 @@ class ConsoleAgent extends Agent {
         hasDependencies = false;
       }
 
-      if (options.module || attrs.flags.module ||
-          hasModuleSpecifier(contents)) {
-        // When testing module or dynamic import code that imports itself,
-        // we must copy the test file with its actual name.
-        tempfile = path.join(temppath, sourcebase);
-      }
+      // if (options.module || attrs.flags.module ||
+      //     hasModuleSpecifier(contents)) {
+      //   // When testing module or dynamic import code that imports itself,
+      //   // we must copy the test file with its actual name.
+      //   tempfile = path.join(temppath, sourcebase);
+      // }
 
       // The test record in "code" is no longer needed and
       // all further operations expect the "code" argument to be
@@ -161,7 +184,6 @@ class ConsoleAgent extends Agent {
       sources.forEach(({0: file}) => fs.unlink(file, () => { /* ignore */ }));
 
       const result = this.normalizeResult({ stderr, stdout });
-
       result.error = this.parseError(result.stderr);
 
       return result;

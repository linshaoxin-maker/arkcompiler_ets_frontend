/**
 * Copyright (c) 2024 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

.language ECMAScript

# ====================
# LITERALS

const_declaration_1548 

const_declaration_1552 { 6 [ i32:0, i32:0, i32:0, i32:0, i32:0, i32:0, ]}

const_declaration_1580 { 8 [ tag_value:5, string:"Jay", tag_value:5, string:"JJ", tag_value:5, string:"Gang", tag_value:5, string:"Bai", ]}

const_declaration_1604 { 12 [ tag_value:5, string:"b", tag_value:5, string:"zhou", tag_value:5, string:"c", tag_value:2, i32:30, tag_value:5, string:"a", tag_value:255, null_value:0, ]}

let_declaration_1635 

let_declaration_1639 { 6 [ i32:0, i32:0, i32:0, i32:0, i32:0, i32:0, ]}

string_declaration_1667 

string_declaration_1671 { 6 [ i32:0, i32:0, i32:0, i32:0, i32:0, i32:0, ]}

type_inference_1699 { 2 [ tag_value:5, string:"Animal", ]}

type_inference_1708 { 6 [ i32:0, i32:0, i32:0, i32:0, i32:0, i32:0, ]}

type_inference_1736 { 8 [ tag_value:2, i32:0, tag_value:2, i32:1, tag_value:255, null_value:0, tag_value:5, string:"1", ]}

type_inference_1757 { 8 [ tag_value:5, string:"e", tag_value:6, method:type_inference.#~@0>#e, tag_value:9, method_affiliate:0, tag_value:2, i32:1, ]}



# ====================
# RECORDS

.record _ESConcurrentModuleRequestsAnnotation {
}
.record.source_file 

.record _ESSlotNumberAnnotation {
}
.record.source_file 

.record const_declaration {
	u8 pkgName@entry 0
	u8 isCommonjs 0
	u8 hasTopLevelAwait 0
	u8 isSharedModule 0
	u32 scopeNames const_declaration_1548
	u32 moduleRecordIdx const_declaration_1552
}
.record.source_file 

.record let_declaration {
	u8 pkgName@entry 0
	u8 isCommonjs 0
	u8 hasTopLevelAwait 0
	u8 isSharedModule 0
	u32 scopeNames let_declaration_1635
	u32 moduleRecordIdx let_declaration_1639
}
.record.source_file 

.record string_declaration {
	u8 pkgName@entry 0
	u8 isCommonjs 0
	u8 hasTopLevelAwait 0
	u8 isSharedModule 0
	u32 scopeNames string_declaration_1667
	u32 moduleRecordIdx string_declaration_1671
}
.record.source_file 

.record type_inference {
	u8 pkgName@entry 0
	u8 isCommonjs 0
	u8 hasTopLevelAwait 0
	u8 isSharedModule 0
	u32 scopeNames type_inference_1699
	u32 moduleRecordIdx type_inference_1708
}
.record.source_file 


# ====================
# METHODS

.function_kind FunctionKind::FUNCTION
 _ESSlotNumberAnnotation
 SlotNumber 0
.function any const_declaration.#*#a(any a0, any a1, any a2) {
	lda.str I can sing qinghua               # line: 29           # column: 0
	return                                   # line: 30           # column: 0
}

.function_kind FunctionKind::FUNCTION
 _ESSlotNumberAnnotation
 SlotNumber 86
.function any const_declaration.func_main_0(any a0, any a1, any a2) {
	nop                                      # line: 15           # column: 0
	lda.str SanYe                            # line: 15           # column: 0
	sta v0                                   # line: 15           # column: 0
	tryldglobalbyname 0x0, print             # line: 17           # column: 0
	sta v1                                   # line: 17           # column: 0
	lda.str SanYe                            # line: 17           # column: 0
	stricteq 0x1, v0                         # line: 17           # column: 0
	sta v0                                   # line: 17           # column: 0
	lda.str success                          # line: 17           # column: 0
	sta v2                                   # line: 17           # column: 0
	lda v1                                   # line: 17           # column: 0
	callargs2 0x2, v0, v2                    # line: 17           # column: 0
	createarraywithbuffer 0x4, const_declaration_1580 # line: 19           # column: 0
	getiterator 0x5                          # line: 21           # column: 0
	sta v0                                   # line: 21           # column: 0
	ldobjbyname 0x7, next                    # line: 21           # column: 0
	sta v1                                   # line: 21           # column: 0
	ldfalse                                  # line: 21           # column: 0
	sta v2                                   # line: 21           # column: 0
	ldfalse                                  # line: 21           # column: 0
	sta v3                                   # line: 21           # column: 0
	ldundefined                              # line: 21           # column: 0
	label@22: mov v6, v3                     # line: 21           # column: 0
	mov v4, v3                               # line: 21           # column: 0
	lda v3                                   # line: 21           # column: 0
	callruntime.istrue 0x9                   # line: 21           # column: 0
	jnez label@46                            # line: 21           # column: 0
	lda v1                                   # line: 21           # column: 0
	callthis0 0xb, v0                        # line: 21           # column: 0
	sta v8                                   # line: 21           # column: 0
	throw.ifnotobject v8                     # line: 21           # column: 0
	ldobjbyname 0xd, done                    # line: 21           # column: 0
	sta v3                                   # line: 21           # column: 0
	mov v6, v3                               # line: 21           # column: 0
	mov v4, v3                               # line: 21           # column: 0
	callruntime.isfalse 0xf                  # line: 21           # column: 0
	jnez label@43                            # line: 21           # column: 0
	ldtrue                                   # line: 21           # column: 0
	sta v3                                   # line: 21           # column: 0
	mov v6, v3                               # line: 21           # column: 0
	mov v4, v3                               # line: 21           # column: 0
	ldundefined                              # line: 21           # column: 0
	jmp label@46                             # line: 21           # column: 0
	label@43: lda v8                         # line: 21           # column: 0
	ldobjbyname 0x11, f                      # line: 21           # column: 0
	jmp label@57                             # line: 21           # column: 0
	label@46: mov v6, v3                     # line: 21           # column: 0
	mov v4, v3                               # line: 21           # column: 0
	ldundefined                              # line: 21           # column: 0
	label@49: jmp label@57                   # line: 21           # column: 0
	label@50: sta v7                         # line: 21           # column: 0
	mov v4, v6                               # line: 21           # column: 0
	ldtrue                                   # line: 21           # column: 0
	sta v1                                   # line: 21           # column: 0
	mov v4, v1                               # line: 21           # column: 0
	lda v7                                   # line: 21           # column: 0
	throw                                    # line: 21           # column: 0
	label@57: mov v6, v3                     # line: 21           # column: 0
	mov v4, v3                               # line: 21           # column: 0
	lda v3                                   # line: 21           # column: 0
	callruntime.istrue 0x13                  # line: 21           # column: 0
	jnez label@82                            # line: 21           # column: 0
	lda v1                                   # line: 21           # column: 0
	callthis0 0x15, v0                       # line: 21           # column: 0
	sta v8                                   # line: 21           # column: 0
	throw.ifnotobject v8                     # line: 21           # column: 0
	ldobjbyname 0x17, done                   # line: 21           # column: 0
	sta v3                                   # line: 21           # column: 0
	mov v6, v3                               # line: 21           # column: 0
	mov v4, v3                               # line: 21           # column: 0
	callruntime.isfalse 0x19                 # line: 21           # column: 0
	jnez label@78                            # line: 21           # column: 0
	ldtrue                                   # line: 21           # column: 0
	sta v3                                   # line: 21           # column: 0
	mov v6, v3                               # line: 21           # column: 0
	mov v4, v3                               # line: 21           # column: 0
	ldundefined                              # line: 21           # column: 0
	jmp label@82                             # line: 21           # column: 0
	label@78: lda v8                         # line: 21           # column: 0
	ldobjbyname 0x1b, f                      # line: 21           # column: 0
	sta v8                                   # line: 21           # column: 0
	jmp label@94                             # line: 21           # column: 0
	label@82: mov v6, v3                     # line: 21           # column: 0
	mov v4, v3                               # line: 21           # column: 0
	ldundefined                              # line: 21           # column: 0
	sta v8                                   # line: 21           # column: 0
	label@86: jmp label@94                   # line: 21           # column: 0
	label@87: sta v7                         # line: 21           # column: 0
	mov v4, v6                               # line: 21           # column: 0
	ldtrue                                   # line: 21           # column: 0
	sta v1                                   # line: 21           # column: 0
	mov v4, v1                               # line: 21           # column: 0
	lda v7                                   # line: 21           # column: 0
	throw                                    # line: 21           # column: 0
	label@94: mov v6, v3                     # line: 21           # column: 0
	mov v4, v3                               # line: 21           # column: 0
	lda v3                                   # line: 21           # column: 0
	callruntime.istrue 0x1d                  # line: 21           # column: 0
	jnez label@118                           # line: 21           # column: 0
	lda v1                                   # line: 21           # column: 0
	callthis0 0x1f, v0                       # line: 21           # column: 0
	sta v9                                   # line: 21           # column: 0
	throw.ifnotobject v9                     # line: 21           # column: 0
	ldobjbyname 0x21, done                   # line: 21           # column: 0
	sta v3                                   # line: 21           # column: 0
	mov v6, v3                               # line: 21           # column: 0
	mov v4, v3                               # line: 21           # column: 0
	callruntime.isfalse 0x23                 # line: 21           # column: 0
	jnez label@115                           # line: 21           # column: 0
	ldtrue                                   # line: 21           # column: 0
	sta v3                                   # line: 21           # column: 0
	mov v6, v3                               # line: 21           # column: 0
	mov v4, v3                               # line: 21           # column: 0
	ldundefined                              # line: 21           # column: 0
	jmp label@118                            # line: 21           # column: 0
	label@115: lda v9                        # line: 21           # column: 0
	ldobjbyname 0x25, f                      # line: 21           # column: 0
	jmp label@129                            # line: 21           # column: 0
	label@118: mov v6, v3                    # line: 21           # column: 0
	mov v4, v3                               # line: 21           # column: 0
	ldundefined                              # line: 21           # column: 0
	label@121: jmp label@129                 # line: 21           # column: 0
	label@122: sta v7                        # line: 21           # column: 0
	mov v4, v6                               # line: 21           # column: 0
	ldtrue                                   # line: 21           # column: 0
	sta v1                                   # line: 21           # column: 0
	mov v4, v1                               # line: 21           # column: 0
	lda v7                                   # line: 21           # column: 0
	throw                                    # line: 21           # column: 0
	label@129: mov v6, v3                    # line: 21           # column: 0
	mov v4, v3                               # line: 21           # column: 0
	lda v3                                   # line: 21           # column: 0
	callruntime.istrue 0x27                  # line: 21           # column: 0
	jnez label@154                           # line: 21           # column: 0
	lda v1                                   # line: 21           # column: 0
	callthis0 0x29, v0                       # line: 21           # column: 0
	sta v1                                   # line: 21           # column: 0
	throw.ifnotobject v1                     # line: 21           # column: 0
	ldobjbyname 0x2b, done                   # line: 21           # column: 0
	sta v3                                   # line: 21           # column: 0
	mov v6, v3                               # line: 21           # column: 0
	mov v4, v3                               # line: 21           # column: 0
	callruntime.isfalse 0x2d                 # line: 21           # column: 0
	jnez label@151                           # line: 21           # column: 0
	mov v4, v3                               # line: 21           # column: 0
	ldtrue                                   # line: 21           # column: 0
	sta v3                                   # line: 21           # column: 0
	mov v6, v3                               # line: 21           # column: 0
	mov v4, v3                               # line: 21           # column: 0
	ldundefined                              # line: 21           # column: 0
	jmp label@154                            # line: 21           # column: 0
	label@151: lda v1                        # line: 21           # column: 0
	ldobjbyname 0x2f, f                      # line: 21           # column: 0
	jmp label@165                            # line: 21           # column: 0
	label@154: mov v6, v3                    # line: 21           # column: 0
	mov v4, v3                               # line: 21           # column: 0
	ldundefined                              # line: 21           # column: 0
	label@157: jmp label@165                 # line: 21           # column: 0
	label@158: sta v7                        # line: 21           # column: 0
	mov v4, v6                               # line: 21           # column: 0
	ldtrue                                   # line: 21           # column: 0
	sta v1                                   # line: 21           # column: 0
	mov v4, v1                               # line: 21           # column: 0
	lda v7                                   # line: 21           # column: 0
	throw                                    # line: 21           # column: 0
	label@165: lda v3                        # line: 21           # column: 0
	callruntime.istrue 0x31                  # line: 21           # column: 0
	jnez label@224                           # line: 21           # column: 0
	lda v2                                   # line: 21           # column: 0
	callruntime.istrue 0x33                  # line: 21           # column: 0
	jnez label@224                           # line: 21           # column: 0
	ldtrue                                   # line: 21           # column: 0
	ldundefined                              # line: 21           # column: 0
	sta v1                                   # line: 21           # column: 0
	ldhole                                   # line: 21           # column: 0
	sta v2                                   # line: 21           # column: 0
	label@176: lda v0                        # line: 21           # column: 0
	ldobjbyname 0x35, return                 # line: 21           # column: 0
	sta v6                                   # line: 21           # column: 0
	ldundefined                              # line: 21           # column: 0
	eq 0x37, v6                              # line: 21           # column: 0
	jnez label@224                           # line: 21           # column: 0
	lda v6                                   # line: 21           # column: 0
	callthis0 0x38, v0                       # line: 21           # column: 0
	sta v0                                   # line: 21           # column: 0
	label@185: jmp label@189                 # line: 21           # column: 0
	label@186: sta v3                        # line: 21           # column: 0
	mov v2, v3                               # line: 21           # column: 0
	jmp label@190                            # line: 21           # column: 0
	label@189: mov v1, v0                    # line: 21           # column: 0
	label@190: ldhole                        # line: 21           # column: 0
	sta v0                                   # line: 21           # column: 0
	lda v2                                   # line: 21           # column: 0
	noteq 0x3a, v0                           # line: 21           # column: 0
	jeqz label@197                           # line: 21           # column: 0
	lda v2                                   # line: 21           # column: 0
	throw                                    # line: 21           # column: 0
	label@197: throw.ifnotobject v1          # line: 21           # column: 0
	jmp label@224                            # line: 21           # column: 0
	label@199: sta v5                        # line: 21           # column: 0
	lda v4                                   # line: 21           # column: 0
	callruntime.istrue 0x3b                  # line: 21           # column: 0
	jnez label@222                           # line: 21           # column: 0
	lda v2                                   # line: 21           # column: 0
	callruntime.istrue 0x3d                  # line: 21           # column: 0
	jnez label@220                           # line: 21           # column: 0
	ldtrue                                   # line: 21           # column: 0
	ldundefined                              # line: 21           # column: 0
	ldhole                                   # line: 21           # column: 0
	label@209: lda v0                        # line: 21           # column: 0
	ldobjbyname 0x3f, return                 # line: 21           # column: 0
	sta v1                                   # line: 21           # column: 0
	ldundefined                              # line: 21           # column: 0
	eq 0x41, v1                              # line: 21           # column: 0
	jnez label@220                           # line: 21           # column: 0
	lda v1                                   # line: 21           # column: 0
	callthis0 0x42, v0                       # line: 21           # column: 0
	label@217: jmp label@218                 # line: 21           # column: 0
	label@218: lda v5                        # line: 21           # column: 0
	throw                                    # line: 21           # column: 0
	label@220: lda v5                        # line: 21           # column: 0
	throw                                    # line: 21           # column: 0
	label@222: lda v5                        # line: 21           # column: 0
	throw                                    # line: 21           # column: 0
	label@224: tryldglobalbyname 0x44, print # line: 21           # column: 0
	sta v0                                   # line: 21           # column: 0
	lda.str JJ                               # line: 21           # column: 0
	stricteq 0x45, v8                        # line: 21           # column: 0
	sta v1                                   # line: 21           # column: 0
	lda.str success                          # line: 21           # column: 0
	sta v2                                   # line: 21           # column: 0
	lda v0                                   # line: 21           # column: 0
	callargs2 0x46, v1, v2                   # line: 21           # column: 0
	createobjectwithbuffer 0x48, const_declaration_1604 # line: 21           # column: 0
	sta v0                                   # line: 21           # column: 0
	definefunc 0x49, const_declaration.#*#a, 0x0 # line: 21           # column: 0
	definepropertybyname 0x4a, a, v0         # line: 21           # column: 0
	lda v0                                   # line: 21           # column: 0
	ldobjbyname 0x4c, b                      # line: 21           # column: 0
	lda v0                                   # line: 21           # column: 0
	ldobjbyname 0x4e, c                      # line: 21           # column: 0
	sta v1                                   # line: 21           # column: 0
	lda v0                                   # line: 21           # column: 0
	ldobjbyname 0x50, a                      # line: 21           # column: 0
	tryldglobalbyname 0x52, print            # line: 21           # column: 0
	sta v0                                   # line: 21           # column: 0
	ldai 0x1e                                # line: 21           # column: 0
	stricteq 0x53, v1                        # line: 21           # column: 0
	sta v1                                   # line: 21           # column: 0
	lda.str success                          # line: 21           # column: 0
	sta v2                                   # line: 21           # column: 0
	lda v0                                   # line: 21           # column: 0
	callargs2 0x54, v1, v2                   # line: 21           # column: 0
	ldundefined                              # line: 21           # column: 0
	returnundefined                          # line: 23           # column: 0
.catchall :
	try_begin_label : label@22
	try_end_label : label@49
	catch_begin_label : label@50
	catch_end_label : label@50
.catchall :
	try_begin_label : label@57
	try_end_label : label@86
	catch_begin_label : label@87
	catch_end_label : label@87
.catchall :
	try_begin_label : label@94
	try_end_label : label@121
	catch_begin_label : label@122
	catch_end_label : label@122
.catchall :
	try_begin_label : label@129
	try_end_label : label@157
	catch_begin_label : label@158
	catch_end_label : label@158
.catchall :
	try_begin_label : label@176
	try_end_label : label@185
	catch_begin_label : label@186
	catch_end_label : label@186
.catchall :
	try_begin_label : label@209
	try_end_label : label@217
	catch_begin_label : label@218
	catch_end_label : label@218
.catchall :
	try_begin_label : label@22
	try_end_label : label@165
	catch_begin_label : label@199
	catch_end_label : label@199
}

.function_kind FunctionKind::FUNCTION
 _ESSlotNumberAnnotation
 SlotNumber 8
.function any let_declaration.func_main_0(any a0, any a1, any a2) {
	lda.str Chinese                          # line: 15           # column: 0
	sta v0                                   # line: 15           # column: 0
	lda.str English                          # line: 18           # column: 0
	sta v1                                   # line: 18           # column: 0
	tryldglobalbyname 0x0, print             # line: 19           # column: 0
	sta v2                                   # line: 19           # column: 0
	lda.str English                          # line: 19           # column: 0
	stricteq 0x1, v1                         # line: 19           # column: 0
	sta v1                                   # line: 19           # column: 0
	lda.str success                          # line: 19           # column: 0
	sta v3                                   # line: 19           # column: 0
	lda v2                                   # line: 19           # column: 0
	callargs2 0x2, v1, v3                    # line: 19           # column: 0
	tryldglobalbyname 0x4, print             # line: 22           # column: 0
	sta v1                                   # line: 22           # column: 0
	lda.str Chinese                          # line: 22           # column: 0
	stricteq 0x5, v0                         # line: 22           # column: 0
	sta v0                                   # line: 22           # column: 0
	lda.str success                          # line: 22           # column: 0
	sta v2                                   # line: 22           # column: 0
	lda v1                                   # line: 22           # column: 0
	callargs2 0x6, v0, v2                    # line: 22           # column: 0
	ldundefined                              # line: 18446744073709551615           # column: 0
	returnundefined                          # line: 18446744073709551615           # column: 0
}

.function_kind FunctionKind::FUNCTION
 _ESSlotNumberAnnotation
 SlotNumber 16
.function any string_declaration.func_main_0(any a0, any a1, any a2) {
	lda.str abc                              # line: 15           # column: 0
	sta v0                                   # line: 15           # column: 0
	tryldglobalbyname 0x0, print             # line: 17           # column: 0
	sta v1                                   # line: 17           # column: 0
	lda.str abc                              # line: 17           # column: 0
	stricteq 0x1, v0                         # line: 17           # column: 0
	sta v2                                   # line: 17           # column: 0
	lda.str success                          # line: 17           # column: 0
	sta v3                                   # line: 17           # column: 0
	lda v1                                   # line: 17           # column: 0
	callargs2 0x2, v2, v3                    # line: 17           # column: 0
	lda.str def                              # line: 19           # column: 0
	sta v1                                   # line: 19           # column: 0
	tryldglobalbyname 0x4, print             # line: 21           # column: 0
	sta v2                                   # line: 21           # column: 0
	lda.str def                              # line: 21           # column: 0
	stricteq 0x5, v1                         # line: 21           # column: 0
	sta v3                                   # line: 21           # column: 0
	lda.str success                          # line: 21           # column: 0
	sta v4                                   # line: 21           # column: 0
	lda v2                                   # line: 21           # column: 0
	callargs2 0x6, v3, v4                    # line: 21           # column: 0
	lda.str aa                               # line: 23           # column: 0
	sta v2                                   # line: 23           # column: 0
	lda v0                                   # line: 23           # column: 0
	add2 0x8, v2                             # line: 23           # column: 0
	sta v0                                   # line: 23           # column: 0
	lda.str 
bb                              # line: 23           # column: 0
	add2 0x9, v0                             # line: 23           # column: 0
	sta v0                                   # line: 23           # column: 0
	lda v1                                   # line: 24           # column: 0
	add2 0xa, v0                             # line: 24           # column: 0
	sta v0                                   # line: 24           # column: 0
	lda.str cc${}                            # line: 23           # column: 0
	add2 0xb, v0                             # line: 24           # column: 0
	sta v0                                   # line: 24           # column: 0
	tryldglobalbyname 0xc, print             # line: 26           # column: 0
	sta v1                                   # line: 26           # column: 0
	lda.str aaabc
bbdefcc${}                 # line: 26           # column: 0
	stricteq 0xd, v0                         # line: 26           # column: 0
	sta v0                                   # line: 26           # column: 0
	lda.str success                          # line: 26           # column: 0
	sta v2                                   # line: 26           # column: 0
	lda v1                                   # line: 26           # column: 0
	callargs2 0xe, v0, v2                    # line: 26           # column: 0
	ldundefined                              # line: 18446744073709551615           # column: 0
	returnundefined                          # line: 18446744073709551615           # column: 0
}

.function_kind FunctionKind::FUNCTION
 _ESSlotNumberAnnotation
 SlotNumber 0
.function any type_inference.#~@0=#d(any a0, any a1, any a2) {
	lda a2                                   # line: 0           # column: 0
	return                                   # line: 0           # column: 0
}

.function_kind FunctionKind::NONE
 _ESSlotNumberAnnotation
 SlotNumber 6
.function any type_inference.#~@0>#e(any a0, any a1, any a2, any a3) {
	ldai 0x0                                 # line: 28           # column: 0
	sta v0                                   # line: 28           # column: 0
	ldundefined                              # line: 28           # column: 0
	stricteq 0x0, a3                         # line: 28           # column: 0
	jeqz label@6                             # line: 28           # column: 0
	mov a3, v0                               # line: 28           # column: 0
	label@6: tryldglobalbyname 0x1, print    # line: 28           # column: 0
	sta v0                                   # line: 28           # column: 0
	lda.str Animal moved                     # line: 29           # column: 0
	sta v1                                   # line: 29           # column: 0
	lda a3                                   # line: 29           # column: 0
	add2 0x2, v1                             # line: 29           # column: 0
	sta v1                                   # line: 29           # column: 0
	lda.str m.                               # line: 29           # column: 0
	add2 0x3, v1                             # line: 29           # column: 0
	sta v1                                   # line: 29           # column: 0
	lda v0                                   # line: 29           # column: 0
	callarg1 0x4, v1                         # line: 29           # column: 0
	ldundefined                              # line: 29           # column: 0
	returnundefined                          # line: 18446744073709551615           # column: 0
}

.function_kind FunctionKind::FUNCTION
 _ESSlotNumberAnnotation
 SlotNumber 29
.function any type_inference.func_main_0(any a0, any a1, any a2) {
	createarraywithbuffer 0x0, type_inference_1736 # line: 15           # column: 0
	sta v0                                   # line: 15           # column: 0
	tryldglobalbyname 0x1, print             # line: 17           # column: 0
	sta v1                                   # line: 17           # column: 0
	tryldglobalbyname 0x2, Array             # line: 17           # column: 0
	instanceof 0x3, v0                       # line: 17           # column: 0
	sta v0                                   # line: 17           # column: 0
	lda.str success                          # line: 17           # column: 0
	sta v2                                   # line: 17           # column: 0
	lda v1                                   # line: 17           # column: 0
	callargs2 0x5, v0, v2                    # line: 17           # column: 0
	tryldglobalbyname 0x7, print             # line: 21           # column: 0
	sta v0                                   # line: 21           # column: 0
	ldai 0x14d                               # line: 21           # column: 0
	typeof 0x8                               # line: 21           # column: 0
	sta v1                                   # line: 21           # column: 0
	lda.str number                           # line: 21           # column: 0
	stricteq 0xa, v1                         # line: 21           # column: 0
	sta v1                                   # line: 21           # column: 0
	lda.str success                          # line: 21           # column: 0
	sta v2                                   # line: 21           # column: 0
	lda v0                                   # line: 21           # column: 0
	callargs2 0xb, v1, v2                    # line: 21           # column: 0
	lda.str [0, 1, null]                     # line: 23           # column: 0
	sta v0                                   # line: 23           # column: 0
	tryldglobalbyname 0xd, print             # line: 25           # column: 0
	sta v1                                   # line: 25           # column: 0
	lda v0                                   # line: 25           # column: 0
	typeof 0xe                               # line: 25           # column: 0
	sta v0                                   # line: 25           # column: 0
	lda.str string                           # line: 25           # column: 0
	stricteq 0x10, v0                        # line: 25           # column: 0
	sta v0                                   # line: 25           # column: 0
	lda.str success                          # line: 25           # column: 0
	sta v2                                   # line: 25           # column: 0
	lda v1                                   # line: 25           # column: 0
	callargs2 0x11, v0, v2                   # line: 25           # column: 0
	ldhole                                   # line: 27           # column: 0
	sta v0                                   # line: 27           # column: 0
	defineclasswithbuffer 0x13, type_inference.#~@0=#d, type_inference_1757, 0x0, v0 # line: 27           # column: 0
	sta v0                                   # line: 27           # column: 0
	ldobjbyname 0x14, prototype              # line: 27           # column: 0
	mov v3, v0                               # line: 27           # column: 0
	newobjrange 0x16, 0x1, v3                # line: 33           # column: 0
	sta v1                                   # line: 33           # column: 0
	tryldglobalbyname 0x18, print            # line: 35           # column: 0
	sta v2                                   # line: 35           # column: 0
	lda v0                                   # line: 35           # column: 0
	instanceof 0x19, v1                      # line: 35           # column: 0
	sta v0                                   # line: 35           # column: 0
	lda.str success                          # line: 35           # column: 0
	sta v1                                   # line: 35           # column: 0
	lda v2                                   # line: 35           # column: 0
	callargs2 0x1b, v0, v1                   # line: 35           # column: 0
	ldundefined                              # line: 18446744073709551615           # column: 0
	returnundefined                          # line: 18446744073709551615           # column: 0
}

# ====================
# STRING

bb
Animal moved 
Array
Chinese
English
I can sing qinghua
JJ
SanYe
[0, 1, null]
a
aa
aaabc
bbdefcc${}
abc
b
c
cc${}
const_declaration.#*#a
def
done
f
m.
next
number
print
prototype
return
string
success
type_inference.#~@0=#d

# Copyright (c) 2021-2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

if (!defined(ark_independent_build)) {
  import("//ark/runtime_core/ark_config.gni")
  import("//build/ohos.gni")
  runtime_core_gn = "//runtime_core"
} else {
  import("//js_runtime/build/runtime_core_gn/ark_config.gni")
  import("$build_root/ark.gni")
  runtime_core_gn = "//js_runtime/build/runtime_core_gn"
}

jsoncpp_root = "$ark_third_party_root/jsoncpp"

config("ts2abc_config") {
  visibility = [ ":*" ]
  include_dirs = [
    ".",
    "$jsoncpp_root/include",
    "$runtime_core_gn/libpandabase",
  ]

  if (enable_bytecode_optimizer) {
    defines = [ "ENABLE_BYTECODE_OPT" ]
  }

  configs = [
    "$runtime_core_gn:ark_config",
    sdk_libc_secshared_config,
    "$runtime_core_gn/libpandafile:arkfile_public_config",
    "$runtime_core_gn/libpandabase:arkbase_public_config",
    "$runtime_core_gn/runtime:arkruntime_public_config",
    "$runtime_core_gn/assembler:arkassembler_public_config",
  ]

  if (enable_bytecode_optimizer) {
    configs += [
      "$runtime_core_gn/compiler:arkcompiler_public_config",
      "$runtime_core_gn/bytecode_optimizer:bytecodeopt_public_config",
    ]
  }
}

config("flag_config") {
  cflags_cc = [ "-fexceptions" ]
}

source_set("jsoncpp_set_static") {
  sources = [
    "$ark_third_party_root/jsoncpp/src/lib_json/json_reader.cpp",
    "$ark_third_party_root/jsoncpp/src/lib_json/json_value.cpp",
    "$ark_third_party_root/jsoncpp/src/lib_json/json_writer.cpp",
  ]
  public_configs = [ "$jsoncpp_root:jsoncpp_config" ]
  public_configs += [ ":flag_config" ]
  include_dirs = [
    "$jsoncpp_root/include",
    "$jsoncpp_root/include/json/",
  ]
}

if (!defined(ark_independent_build)) {
  ohos_static_library("jsoncpp_static") {
    deps = [ ":jsoncpp_set_static" ]
    use_exceptions = true
    subsystem_name = "ark"
    part_name = "ark_frontend_tool"
  }

  ohos_executable("ts2abc") {
    sources = [
      "main.cpp",
      "ts2abc.cpp",
    ]

    configs = [ ":ts2abc_config" ]

    cflags = [
      "-Wno-c++20-designator",
      "-Wno-c99-extensions",
      "-Wno-unknown-warning-option",
    ]

    deps = [ sdk_libc_secshared_dep ]

    if (is_linux || is_mingw || is_mac) {
      deps += [
        "$runtime_core_gn/assembler:libarkassembler_frontend_static",
        "$runtime_core_gn/libpandabase:libarkbase_frontend_static",
        "$runtime_core_gn/libpandafile:libarkfile_frontend_static",
        "$runtime_core_gn/libziparchive:libarkziparchive_frontend_static",
        "//third_party/jsoncpp:jsoncpp_static",
      ]
      if (enable_bytecode_optimizer) {
        deps += [
          "$runtime_core_gn/bytecode_optimizer:libarkbytecodeopt_frontend_static",
          "$runtime_core_gn/compiler:libarkcompiler_frontend_static",
        ]
      }
    } else {
      deps += [
        "$runtime_core_gn/assembler:libarkassembler",
        "$runtime_core_gn/libpandabase:libarkbase",
        "$runtime_core_gn/libpandafile:libarkfile",
        "$runtime_core_gn/libziparchive:libarkziparchive",
        "$jsoncpp_root:jsoncpp",
      ]
      if (enable_bytecode_optimizer) {
        deps += [
          "$runtime_core_gn/bytecode_optimizer:libarkbytecodeopt",
          "$runtime_core_gn/compiler:libarkcompiler",
        ]
      }
    }

    if (is_linux) {
      if (build_public_version) {
        ldflags = [ "-static-libstdc++" ]
      } else {
        libs = [ libcpp_static_lib ]
      }
    }

    output_name = "js2abc"
    install_enable = true
    subsystem_name = "ark"
  }
} else {
  ark_static_library("jsoncpp_static") {
    deps = [ ":jsoncpp_set_static" ]
  }
}

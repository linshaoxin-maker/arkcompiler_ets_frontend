/*
 * Copyright (c) 2024 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

function foo(param? : Object)
{
   for (let i? of "blablabla") { }
}

function foo(a : int = 10, b : int, c : int = 15) : int
{
    return a + b;
}

class Door {
    private _width: int;
    native get width(): int {
        return this._width;
    }
}

abstract class A{
    abstract constructor(val: int);
};

let a: (c: int, b: int) => char rethrows;

function foo(undefined int) { return 1}

type 123 = int;

type null = byte;

type this = Object;

const x;

function f(a): void {}

function foo(...q: int[], ...p: int[]): int {
    return q.length + p.length;
}

function foo(...p: Object): Object {
    return new Object();
}

function foo(...p: int): int {
    return 1;
}

function foo(a: int, ...p): int {
    return a;
}

class A {
  class B {
    public x: int;
  }
}

class A {
  private interface I { fee(): int }
}

class B implements A.I {
  public override fee(): int {
    return 1;
  }
}

class A {
  class B {
    i: int = 1;
  }
  getInner(): B {
    return new B();
  }
}

class A {
  class B {
    foo(): int {
      return 1;
    }
  }
  getInner(): B {
    return new B();
  }
}

function foo(... a: byte): void {}
native function foo(... b: byte): long;

function min(v: double, u: double): double {
    assert false
    return v < u ? v : u;
}

class D1 {
  internal getValue(): int { return 1 }
}

function foo<T, U>(a: T, case: U): T {
    return a;
}

function foo<T, U>(a: T, case: U): T {
    return a;
}

let ,abc = 0;

declare async function foo(): Promise<void>

declare function addResult(): number;

function main(): void {
    try {
        throw new Exception();
    } catch () {
        //Do something.
    }
    try {
        throw new Exception();
    } catch (e = 0) {
        //Do something.
    }

    assert foo() == undefined

    f(0);

    let a10: A = new A();
    assert(a10.getInner().i == 2);

    let instance_A: A = new A(2, 3);
    let instanc_A: A = new A(2);

    let instance0: D0 = new D0();
    instance0.x;

    let instance1: D1 = new D1();
    instance1.getValue();

    let b: A = new A();
    assert(b.getInner().foo() == 1);

    min(1.0, 1.0)
    let let = 0;
    let const = 0;
    let new = 0;
    foo<Long, Boolean>(new Long(), new Boolean(true))
    foo<Long, Boolean>(new Long(), new Boolean(true))
    f();
}

/* @@? 18:14 Error SyntaxError: Optional variable is not allowed in for of statements  */
/* @@? 28:12 Error SyntaxError: Modifiers of getter and setter are limited to ('abstract', 'static', 'final', 'override').  */
/* @@? 34:14 Error SyntaxError: The modifier for a constructor should be limited to access modifiers(private, internal, protected, public).  */
/* @@? 37:33 Error SyntaxError: Only 'throws' can be used with function types  */
/* @@? 37:33 Error SyntaxError: Unexpected token 'identification literal'.  */
/* @@? 39:14 Error SyntaxError: Unexpected token, expected an identifier.  */
/* @@? 39:27 Error SyntaxError: Parameter declaration should have an explicit type annotation.  */
/* @@? 41:6 Error SyntaxError: Unexpected token, expected an identifier.  */
/* @@? 43:6 Error SyntaxError: Unexpected token, expected an identifier.  */
/* @@? 45:6 Error SyntaxError: Unexpected token, expected an identifier.  */
/* @@? 47:8 Error SyntaxError: Variable must be initialized or it's type must be declared  */
/* @@? 47:8 Error SyntaxError: Missing initializer in const declaration  */
/* @@? 47:8 Error SyntaxError: Variable must be initialized or it's type must be declared  */
/* @@? 49:13 Error SyntaxError: Parameter declaration should have an explicit type annotation.  */
/* @@? 51:25 Error SyntaxError: Rest parameter must be the last formal parameter.  */
/* @@? 51:27 Error SyntaxError: Unexpected token '...'.  */
/* @@? 51:33 Error SyntaxError: Label must be followed by a loop statement  */
/* @@? 51:38 Error SyntaxError: Unexpected token ')'.  */
/* @@? 51:38 Error SyntaxError: Unexpected token ')'.  */
/* @@? 51:39 Error SyntaxError: Unexpected token ':'.  */
/* @@? 51:45 Error SyntaxError: Unexpected token '{'.  */
/* @@? 52:5 Error SyntaxError: return keyword should be used in function body  */
/* @@? 55:26 Error SyntaxError: Rest parameter should be of an array type.  */
/* @@? 59:23 Error SyntaxError: Rest parameter should be of an array type.  */
/* @@? 63:26 Error SyntaxError: Parameter declaration should have an explicit type annotation.  */
/* @@? 68:3 Error SyntaxError: Local type declaration (class, struct, interface and enum) support is not yet implemented.  */
/* @@? 74:11 Error SyntaxError: Local type declaration (class, struct, interface and enum) support is not yet implemented.  */
/* @@? 84:3 Error SyntaxError: Local type declaration (class, struct, interface and enum) support is not yet implemented.  */
/* @@? 93:3 Error SyntaxError: Local type declaration (class, struct, interface and enum) support is not yet implemented.  */
/* @@? 103:25 Error SyntaxError: Rest parameter should be of an array type.  */
/* @@? 104:32 Error SyntaxError: Rest parameter should be of an array type.  */
/* @@? 115:26 Error SyntaxError: Unexpected token, expected an identifier.  */
/* @@? 115:30 Error SyntaxError: Unexpected token, expected an identifier.  */
/* @@? 115:33 Error SyntaxError: Parameter declaration should have an explicit type annotation.  */
/* @@? 119:26 Error SyntaxError: Unexpected token, expected an identifier.  */
/* @@? 119:30 Error SyntaxError: Unexpected token, expected an identifier.  */
/* @@? 119:33 Error SyntaxError: Parameter declaration should have an explicit type annotation.  */
/* @@? 123:5 Error SyntaxError: Identifier expected, got ','.  */
/* @@? 123:6 Error SyntaxError: Variable must be initialized or it's type must be declared  */
/* @@? 123:6 Error SyntaxError: Variable must be initialized or it's type must be declared  */
/* @@? 123:6 Error SyntaxError: Unexpected token 'identification literal'.  */
/* @@? 127:1 Error SyntaxError: The modifier async cannot be used in an ambient context.  */
/* @@? 132:14 Error SyntaxError: Unexpected token in catch parameter, expected an identifier  */
/* @@? 137:16 Error SyntaxError: Catch clause variable cannot have an initializer  */
/* @@? 137:16 Error SyntaxError: Unexpected token, expected: ')'.  */
/* @@? 137:18 Error SyntaxError: Unexpected token 'number literal', expected '{'.  */
/* @@? 137:18 Error SyntaxError: Expected a '{', got 'number literal'.  */
/* @@? 137:19 Error SyntaxError: Unexpected token ')'.  */
/* @@? 137:19 Error SyntaxError: Unexpected token ')'.  */
/* @@? 161:9 Error SyntaxError: Identifier expected, got 'let'.  */
/* @@? 162:9 Error SyntaxError: Identifier expected, got 'const'.  */
/* @@? 163:9 Error SyntaxError: Identifier expected, got 'new'.  */
/* @@? 222:1 Error SyntaxError: Expected a '}' got 'eos'.  */

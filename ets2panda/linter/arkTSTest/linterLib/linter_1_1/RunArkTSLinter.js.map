{"version":3,"file":"RunArkTSLinter.js","names":["ts","_interopRequireWildcard","require","path","_ProblemSeverity","_TypeScriptLinter","_GetTscDiagnostics","_ArkTSTimePrinter","_GetScriptKind","_SdkTSCCompiledProgram","_incrementalLinter","_InteropTypescriptLinter","_Logger","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","_newArrowCheck","TypeError","makeDiag","category","code","file","start","length","messageText","translateDiag","srcFile","problemInfo","LINTER_MSG_CODE_START","severity","ProblemSeverity","ERROR","DiagnosticCategory","Error","Warning","end","rule","runArkTSLinter","tsBuilderProgram","buildInfoWriteFile","arkTSVersion","needAutoFix","isUseRtLogic","_this","diagnostics","tscDiagnosticsLinter","SdkTSCCompiledProgram","program","getProgram","incrementalLinterState","IncrementalLinterState","updateProgramStateArkTSVersion","timePrinterInstance","ArkTSLinterTimePrinter","getInstance","appendTime","TimePhase","INIT","updateCompilationDiagnostics","srcFiles","getSrcFiles","Logger","info","tscStrictDiagnostics","getTscDiagnostics","filter","isFileChanged","bind","GET_TSC_DIAGNOSTICS","etsLoaderPath","getCompilerOptions","tsImportSendableEnable","linter","createTypeScriptLinter","interopTypescriptLinter","createInteropTypescriptLinter","processFiles","LINT","emitBuildInfo","getBuilderProgram","EMIT_BUILD_INFO","releaseResources","fileToLint","scriptKind","getScriptKind","ScriptKind","ETS","TS","currentDiagnostics","getDiagnostic","push","updateDiagnostics","_this2","fileName","lint","normalize","problemsInfos","forEach","x","isKit","basename","toLowerCase","indexOf","isInOhModules","isOHModules","isInSdk","b","resolvePath","c","getOldDiagnostics","getSourceFiles","TypeScriptLinter","initGlobals","getLinterTypeChecker","undefined","compileOptions","InteropTypescriptLinter"],"sources":["../../../sdk/linter_1_1/RunArkTSLinter.ts"],"sourcesContent":["/*\n * Copyright (c) 2024 Huawei Device Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, softwareP\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as ts from 'typescript';\nimport * as path from 'node:path';\nimport type { ProblemInfo } from '../../lib/ProblemInfo';\nimport { ProblemSeverity } from '../../lib/ProblemSeverity';\nimport { TypeScriptLinter } from '../../lib/TypeScriptLinter';\nimport { getTscDiagnostics } from '../../lib/ts-diagnostics/GetTscDiagnostics';\nimport { ArkTSLinterTimePrinter, TimePhase } from '../ArkTSTimePrinter';\nimport { getScriptKind } from '../../lib/utils/functions/GetScriptKind';\nimport { SdkTSCCompiledProgram } from './SdkTSCCompiledProgram';\nimport { IncrementalLinterState } from './incrementalLinter';\nimport { InteropTypescriptLinter } from '../../lib/InteropTypescriptLinter';\nimport { Logger } from '../../lib/Logger';\n\nfunction makeDiag(\n  category: ts.DiagnosticCategory,\n  code: number,\n  file: ts.SourceFile,\n  start: number,\n  length: number,\n  messageText: string\n): ts.Diagnostic {\n  return { category, code, file, start, length, messageText };\n}\n\nexport function translateDiag(srcFile: ts.SourceFile, problemInfo: ProblemInfo): ts.Diagnostic {\n  const LINTER_MSG_CODE_START = -1;\n  const severity =\n    problemInfo.severity === ProblemSeverity.ERROR ? ts.DiagnosticCategory.Error : ts.DiagnosticCategory.Warning;\n  return makeDiag(\n    severity,\n    LINTER_MSG_CODE_START /* + problemInfo.ruleTag */,\n    srcFile,\n    problemInfo.start,\n    problemInfo.end - problemInfo.start + 1,\n    problemInfo.rule\n  );\n}\n\nexport function runArkTSLinter(\n  tsBuilderProgram: ts.BuilderProgram,\n  srcFile?: ts.SourceFile,\n  buildInfoWriteFile?: ts.WriteFileCallback,\n  arkTSVersion?: string,\n  needAutoFix?: boolean,\n  isUseRtLogic?: boolean\n): ts.Diagnostic[] {\n  const diagnostics: ts.Diagnostic[] = [];\n  const tscDiagnosticsLinter = new SdkTSCCompiledProgram(tsBuilderProgram);\n  const program = tscDiagnosticsLinter.getProgram();\n  const incrementalLinterState = new IncrementalLinterState(tsBuilderProgram, arkTSVersion);\n  incrementalLinterState.updateProgramStateArkTSVersion(arkTSVersion);\n  const timePrinterInstance = ArkTSLinterTimePrinter.getInstance();\n  timePrinterInstance.appendTime(TimePhase.INIT);\n  tscDiagnosticsLinter.updateCompilationDiagnostics();\n  const srcFiles: ts.SourceFile[] = getSrcFiles(program, srcFile);\n  Logger.info(\"getTscDiagnostics\");\n  const tscStrictDiagnostics = getTscDiagnostics(\n    tscDiagnosticsLinter,\n    srcFiles.filter((file) => {\n      return incrementalLinterState.isFileChanged(file);\n    })\n  );\n  timePrinterInstance.appendTime(TimePhase.GET_TSC_DIAGNOSTICS);\n  const etsLoaderPath = program.getCompilerOptions().etsLoaderPath;\n  const tsImportSendableEnable = program.getCompilerOptions().tsImportSendableEnable;\n  Logger.info(\"createTypeScriptLinter\");\n  const linter = createTypeScriptLinter(program, tscStrictDiagnostics, needAutoFix, isUseRtLogic);\n  const interopTypescriptLinter = createInteropTypescriptLinter(\n    program,\n    tsBuilderProgram.getCompilerOptions(),\n    isUseRtLogic\n  );\n  Logger.info(\"processFiles\");\n  processFiles(\n    incrementalLinterState,\n    linter,\n    interopTypescriptLinter,\n    srcFiles,\n    tscStrictDiagnostics,\n    diagnostics,\n    etsLoaderPath,\n    tsImportSendableEnable\n  );\n  timePrinterInstance.appendTime(TimePhase.LINT);\n  if (buildInfoWriteFile) {\n    IncrementalLinterState.emitBuildInfo(buildInfoWriteFile, tscDiagnosticsLinter.getBuilderProgram());\n    timePrinterInstance.appendTime(TimePhase.EMIT_BUILD_INFO);\n  }\n  releaseResources();\n  return diagnostics;\n}\n\nfunction processFiles(\n  incrementalLinterState: IncrementalLinterState,\n  linter: TypeScriptLinter,\n  interopTypescriptLinter: InteropTypescriptLinter,\n  srcFiles: ts.SourceFile[],\n  tscStrictDiagnostics: Map<string, ts.Diagnostic[]>,\n  diagnostics: ts.Diagnostic[],\n  etsLoaderPath?: string,\n  tsImportSendableEnable?: boolean\n): void {\n  for (const fileToLint of srcFiles) {\n    const scriptKind = getScriptKind(fileToLint);\n    if (scriptKind !== ts.ScriptKind.ETS && scriptKind !== ts.ScriptKind.TS) {\n      continue;\n    }\n    \n    const currentDiagnostics = getDiagnostic(\n      incrementalLinterState,\n      linter,\n      interopTypescriptLinter,\n      fileToLint,\n      tscStrictDiagnostics,\n      scriptKind,\n      etsLoaderPath,\n      tsImportSendableEnable\n    );\n    diagnostics.push(...currentDiagnostics);\n    incrementalLinterState.updateDiagnostics(fileToLint, currentDiagnostics);\n  }\n}\n\nfunction getDiagnostic(\n  incrementalLinterState: IncrementalLinterState,\n  linter: TypeScriptLinter,\n  interopTypescriptLinter: InteropTypescriptLinter,\n  fileToLint: ts.SourceFile,\n  tscStrictDiagnostics: Map<string, ts.Diagnostic[]>,\n  scriptKind: ts.ScriptKind,\n  etsLoaderPath?: string,\n  tsImportSendableEnable?: boolean\n): ts.Diagnostic[] {\n  let currentDiagnostics: ts.Diagnostic[] = [];\n  if (incrementalLinterState.isFileChanged(fileToLint)) {\n    if (scriptKind === ts.ScriptKind.ETS) {\n      Logger.info(\"lint==  ets==fileToLint====\" + fileToLint.fileName);\n      linter.lint(fileToLint);\n\n      // Get list of bad nodes from the current run.\n      currentDiagnostics = tscStrictDiagnostics.get(path.normalize(fileToLint.fileName)) ?? [];\n      linter.problemsInfos.forEach((x) => {\n        return currentDiagnostics.push(translateDiag(fileToLint, x));\n      });\n    } else {\n      Logger.info(\"lint==  ts==fileToLint====\" + fileToLint.fileName);\n      const isKit = path.basename(fileToLint.fileName).toLowerCase().\n        indexOf('@kit.') === 0;\n      const isInOhModules = ts.isOHModules(fileToLint.fileName);\n      if (isKit || isInOhModules) {\n        Logger.info(\"isKit || isInOhModules====\");\n        return currentDiagnostics;\n      }\n\n      let isInSdk = false;\n      if (!!etsLoaderPath) {\n        const a = path.normalize(fileToLint.fileName);\n        // @ts-ignore\n        const b = ts.resolvePath(etsLoaderPath, '../..');\n        const c = a.indexOf(b);\n        isInSdk = c === 0;\n      }\n      // const isInSdk = etsLoaderPath ?\n      //   path.normalize(fileToLint.fileName).indexOf(path.resolve(etsLoaderPath, '../..')) === 0 :\n      //   false;\n      if (!tsImportSendableEnable && !isInSdk) {\n        Logger.info(\"isInSdk====\" + isInSdk);\n        Logger.info(\"tsImportSendableEnable====\" + tsImportSendableEnable);\n        return currentDiagnostics;\n      }\n\n      interopTypescriptLinter.lint(fileToLint);\n      interopTypescriptLinter.problemsInfos.forEach((x) => {\n        return currentDiagnostics.push(translateDiag(fileToLint, x));\n      });\n    }\n  } else {\n    // Get diagnostics from old run.\n    currentDiagnostics = incrementalLinterState.getOldDiagnostics(fileToLint);\n  }\n  return currentDiagnostics;\n}\n\nfunction getSrcFiles(program: ts.Program, srcFile?: ts.SourceFile): ts.SourceFile[] {\n  let srcFiles: ts.SourceFile[] = [];\n  if (srcFile) {\n    srcFiles.push(srcFile);\n  } else {\n    srcFiles = program.getSourceFiles() as ts.SourceFile[];\n  }\n  return srcFiles;\n}\n\nfunction createTypeScriptLinter(\n  program: ts.Program,\n  tscStrictDiagnostics: Map<string, ts.Diagnostic[]>,\n  needAutoFix?: boolean,\n  isUseRtLogic?: boolean\n): TypeScriptLinter {\n  TypeScriptLinter.initGlobals();\n  Logger.info(\"lint====needAutoFix====\" + !!needAutoFix);\n  return new TypeScriptLinter(\n    program.getLinterTypeChecker(),\n    !!needAutoFix,\n    !!isUseRtLogic,\n    undefined,\n    undefined,\n    tscStrictDiagnostics\n  );\n}\n\nfunction createInteropTypescriptLinter(\n  program: ts.Program,\n  compileOptions: ts.CompilerOptions,\n  isUseRtLogic?: boolean\n): InteropTypescriptLinter {\n  return new InteropTypescriptLinter(program.getLinterTypeChecker(), compileOptions, undefined, !!isUseRtLogic);\n}\n\n// Reclaim memory for Hvigor with \"no-parallel\" and \"daemon\".\nfunction releaseResources(): void {}\n"],"mappings":"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","ignoreList":[]}
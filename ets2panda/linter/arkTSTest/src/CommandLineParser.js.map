{"version":3,"file":"CommandLineParser.js","names":["_Logger","require","_LogTscDiagnostic","_commander","ts","_interopRequireWildcard","fs","path","_this","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","_newArrowCheck","TypeError","TS_EXT","TSX_EXT","ETS_EXT","inputFiles","responseFile","addSrcFile","value","startsWith","push","getFiles","dir","resultFiles","files","readdirSync","length","name","join","statSync","isDirectory","extension","extname","bind","addProjectFolder","projectFolder","previous","concat","formCommandLineOptions","program","opts","warningsAsErrors","enableAutofix","enableUseRtLogic","options","TSC_Errors","logTscErrors","devecoPluginMode","ideMode","testMode","doProjectFolderArg","project","doProjectArg","autofix","parseCommandLine","commandLineArgs","_this2","Command","description","version","option","addOption","Option","hideHelp","argument","cmdArgs","parse","readFileSync","slice","toString","split","filter","trimEnd","error","Logger","process","exit","prjFolders","prjFolderPath","cfgPath","_this3","configFile","host","sys","diagnostics","oldUnrecoverableDiagnostic","onUnRecoverableConfigFileDiagnostic","diagnostic","parsedConfigFile","getParsedCommandLineOfConfigFile","getConfigFileParsingDiagnostics","logTscDiagnostic","info"],"sources":["../../src/CommandLineParser.ts"],"sourcesContent":["/*\n * Copyright (c) 2023-2024 Huawei Device Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger } from '../lib/Logger';\nimport { logTscDiagnostic } from '../lib/utils/functions/LogTscDiagnostic';\nimport type { CommandLineOptions } from '../lib/CommandLineOptions';\nimport { Command, Option } from 'commander';\nimport * as ts from 'typescript';\nimport * as fs from 'node:fs';\nimport * as path from 'node:path';\n\nconst TS_EXT = '.ts';\nconst TSX_EXT = '.tsx';\nconst ETS_EXT = '.ets';\n\nlet inputFiles: string[];\nlet responseFile = '';\nfunction addSrcFile(value: string): void {\n  if (value.startsWith('@')) {\n    responseFile = value;\n  } else {\n    inputFiles.push(value);\n  }\n}\n\nconst getFiles = (dir: string): string[] => {\n  const resultFiles: string[] = [];\n\n  const files = fs.readdirSync(dir);\n  for (let i = 0; i < files.length; ++i) {\n    const name = path.join(dir, files[i]);\n    if (fs.statSync(name).isDirectory()) {\n      resultFiles.push(...getFiles(name));\n    } else {\n      const extension = path.extname(name);\n      if (extension === TS_EXT || extension === TSX_EXT || extension === ETS_EXT) {\n        resultFiles.push(name);\n      }\n    }\n  }\n\n  return resultFiles;\n};\n\nfunction addProjectFolder(projectFolder: string, previous: string[]): string[] {\n  return previous.concat([projectFolder]);\n}\n\nfunction formCommandLineOptions(program: Command): CommandLineOptions {\n  const opts: CommandLineOptions = {\n    inputFiles: inputFiles,\n    warningsAsErrors: false,\n    enableAutofix: false,\n    enableUseRtLogic: true\n  };\n  const options = program.opts();\n  if (options.TSC_Errors) {\n    opts.logTscErrors = true;\n  }\n  if (options.devecoPluginMode) {\n    opts.ideMode = true;\n  }\n  if (options.testMode) {\n    opts.testMode = true;\n  }\n  if (options.projectFolder) {\n    doProjectFolderArg(options.projectFolder, opts);\n  }\n  if (options.project) {\n    doProjectArg(options.project, opts);\n  }\n  if (options.autofix) {\n    opts.enableAutofix = true;\n  }\n  if (options.warningsAsErrors) {\n    opts.warningsAsErrors = true;\n  }\n  if (!options.enableUseRtLogic) {\n    opts.enableUseRtLogic = false;\n  }\n  return opts;\n}\n\nexport function parseCommandLine(commandLineArgs: string[]): CommandLineOptions {\n  const program = new Command();\n  program.name('tslinter').description('Linter for TypeScript sources').\n    version('0.0.1');\n  program.\n    option('-E, --TSC_Errors', 'show error messages from Tsc').\n    option('--test-mode', 'run linter as if running TS test files').\n    option('--deveco-plugin-mode', 'run as IDE plugin').\n    option('-p, --project <project_file>', 'path to TS project config file').\n    option('--project-folder <project_folder>', 'path to folder containig TS files to verify', addProjectFolder, []).\n    option('--autofix', 'automatically fix problems found by linter').\n    option('--enableUseRtLogic', 'linter with RT').\n    addOption(new Option('--warnings-as-errors', 'treat warnings as errors').hideHelp(true));\n  program.argument('[srcFile...]', 'files to be verified', addSrcFile);\n\n  inputFiles = [];\n  // method parse() eats two first args, so make them dummy\n  let cmdArgs: string[] = ['dummy', 'dummy'];\n  cmdArgs.push(...commandLineArgs);\n  program.parse(cmdArgs);\n  if (responseFile !== '') {\n    try {\n      commandLineArgs = fs.\n        readFileSync(responseFile.slice(1)).\n        toString().\n        split('\\n').\n        filter((e) => {\n          return e.trimEnd();\n        });\n      cmdArgs = ['dummy', 'dummy'];\n      cmdArgs.push(...commandLineArgs);\n      program.parse(cmdArgs);\n    } catch (error) {\n      Logger.error('Failed to read response file: ' + error);\n      process.exit(-1);\n    }\n  }\n\n  return formCommandLineOptions(program);\n}\n\nfunction doProjectFolderArg(prjFolders: string[], opts: CommandLineOptions): void {\n  for (let i = 0; i < prjFolders.length; i++) {\n    const prjFolderPath = prjFolders[i];\n    try {\n      opts.inputFiles.push(...getFiles(prjFolderPath));\n    } catch (error) {\n      Logger.error('Failed to read folder: ' + error);\n      process.exit(-1);\n    }\n  }\n}\n\nfunction doProjectArg(cfgPath: string, opts: CommandLineOptions): void {\n  // Process project file (tsconfig.json) and retrieve config arguments.\n  const configFile = cfgPath;\n\n  const host: ts.ParseConfigFileHost = ts.sys as ts.System & ts.ParseConfigFileHost;\n\n  const diagnostics: ts.Diagnostic[] = [];\n\n  try {\n    const oldUnrecoverableDiagnostic = host.onUnRecoverableConfigFileDiagnostic;\n    host.onUnRecoverableConfigFileDiagnostic = (diagnostic: ts.Diagnostic): void => {\n      diagnostics.push(diagnostic);\n    };\n    opts.parsedConfigFile = ts.getParsedCommandLineOfConfigFile(configFile, {}, host);\n    host.onUnRecoverableConfigFileDiagnostic = oldUnrecoverableDiagnostic;\n\n    if (opts.parsedConfigFile) {\n      diagnostics.push(...ts.getConfigFileParsingDiagnostics(opts.parsedConfigFile));\n    }\n\n    if (diagnostics.length > 0) {\n      // Log all diagnostic messages and exit program.\n      Logger.error('Failed to read config file.');\n      logTscDiagnostic(diagnostics, Logger.info);\n      process.exit(-1);\n    }\n  } catch (error) {\n    Logger.error('Failed to read config file: ' + error);\n    process.exit(-1);\n  }\n}\n"],"mappings":";;;;;;AAeA,IAAAA,OAAA,GAAAC,OAAA;AACA,IAAAC,iBAAA,GAAAD,OAAA;AAEA,IAAAE,UAAA,GAAAF,OAAA;AACA,IAAAG,EAAA,GAAAC,uBAAA,CAAAJ,OAAA;AACA,IAAAK,EAAA,GAAAD,uBAAA,CAAAJ,OAAA;AACA,IAAAM,IAAA,GAAAF,uBAAA,CAAAJ,OAAA;AAAkC,IAAAO,KAAA;AArBlC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA,SAAAC,yBAAAC,CAAA,6BAAAC,OAAA,mBAAAC,CAAA,OAAAD,OAAA,IAAAE,CAAA,OAAAF,OAAA,YAAAF,wBAAA,YAAAA,CAAAC,CAAA,WAAAA,CAAA,GAAAG,CAAA,GAAAD,CAAA,KAAAF,CAAA;AAAA,SAAAL,wBAAAK,CAAA,EAAAE,CAAA,SAAAA,CAAA,IAAAF,CAAA,IAAAA,CAAA,CAAAI,UAAA,SAAAJ,CAAA,eAAAA,CAAA,uBAAAA,CAAA,yBAAAA,CAAA,WAAAK,OAAA,EAAAL,CAAA,QAAAG,CAAA,GAAAJ,wBAAA,CAAAG,CAAA,OAAAC,CAAA,IAAAA,CAAA,CAAAG,GAAA,CAAAN,CAAA,UAAAG,CAAA,CAAAI,GAAA,CAAAP,CAAA,OAAAQ,CAAA,KAAAC,SAAA,UAAAC,CAAA,GAAAC,MAAA,CAAAC,cAAA,IAAAD,MAAA,CAAAE,wBAAA,WAAAC,CAAA,IAAAd,CAAA,oBAAAc,CAAA,OAAAC,cAAA,CAAAC,IAAA,CAAAhB,CAAA,EAAAc,CAAA,SAAAG,CAAA,GAAAP,CAAA,GAAAC,MAAA,CAAAE,wBAAA,CAAAb,CAAA,EAAAc,CAAA,UAAAG,CAAA,KAAAA,CAAA,CAAAV,GAAA,IAAAU,CAAA,CAAAC,GAAA,IAAAP,MAAA,CAAAC,cAAA,CAAAJ,CAAA,EAAAM,CAAA,EAAAG,CAAA,IAAAT,CAAA,CAAAM,CAAA,IAAAd,CAAA,CAAAc,CAAA,YAAAN,CAAA,CAAAH,OAAA,GAAAL,CAAA,EAAAG,CAAA,IAAAA,CAAA,CAAAe,GAAA,CAAAlB,CAAA,EAAAQ,CAAA,GAAAA,CAAA;AAAA,SAAAW,eAAAX,CAAA,EAAAN,CAAA,QAAAM,CAAA,KAAAN,CAAA,YAAAkB,SAAA;AAuBA,MAAMC,MAAM,GAAG,KAAK;AACpB,MAAMC,OAAO,GAAG,MAAM;AACtB,MAAMC,OAAO,GAAG,MAAM;AAEtB,IAAIC,UAAoB;AACxB,IAAIC,YAAY,GAAG,EAAE;AACrB,SAASC,UAAUA,CAACC,KAAa,EAAQ;EACvC,IAAIA,KAAK,CAACC,UAAU,CAAC,GAAG,CAAC,EAAE;IACzBH,YAAY,GAAGE,KAAK;EACtB,CAAC,MAAM;IACLH,UAAU,CAACK,IAAI,CAACF,KAAK,CAAC;EACxB;AACF;AAEA,MAAMG,SAAQ,GAAG,SAAAA,SAACC,GAAW,EAAe;EAAAZ,cAAA,OAAArB,KAAA;EAC1C,MAAMkC,WAAqB,GAAG,EAAE;EAEhC,MAAMC,KAAK,GAAGrC,EAAE,CAACsC,WAAW,CAACH,GAAG,CAAC;EACjC,KAAK,IAAId,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGgB,KAAK,CAACE,MAAM,EAAE,EAAElB,CAAC,EAAE;IACrC,MAAMmB,IAAI,GAAGvC,IAAI,CAACwC,IAAI,CAACN,GAAG,EAAEE,KAAK,CAAChB,CAAC,CAAC,CAAC;IACrC,IAAIrB,EAAE,CAAC0C,QAAQ,CAACF,IAAI,CAAC,CAACG,WAAW,CAAC,CAAC,EAAE;MACnCP,WAAW,CAACH,IAAI,CAAC,GAAGC,SAAQ,CAACM,IAAI,CAAC,CAAC;IACrC,CAAC,MAAM;MACL,MAAMI,SAAS,GAAG3C,IAAI,CAAC4C,OAAO,CAACL,IAAI,CAAC;MACpC,IAAII,SAAS,KAAKnB,MAAM,IAAImB,SAAS,KAAKlB,OAAO,IAAIkB,SAAS,KAAKjB,OAAO,EAAE;QAC1ES,WAAW,CAACH,IAAI,CAACO,IAAI,CAAC;MACxB;IACF;EACF;EAEA,OAAOJ,WAAW;AACpB,CAAC,CAAAU,IAAA;AAED,SAASC,gBAAgBA,CAACC,aAAqB,EAAEC,QAAkB,EAAY;EAC7E,OAAOA,QAAQ,CAACC,MAAM,CAAC,CAACF,aAAa,CAAC,CAAC;AACzC;AAEA,SAASG,sBAAsBA,CAACC,OAAgB,EAAsB;EACpE,MAAMC,IAAwB,GAAG;IAC/BzB,UAAU,EAAEA,UAAU;IACtB0B,gBAAgB,EAAE,KAAK;IACvBC,aAAa,EAAE,KAAK;IACpBC,gBAAgB,EAAE;EACpB,CAAC;EACD,MAAMC,OAAO,GAAGL,OAAO,CAACC,IAAI,CAAC,CAAC;EAC9B,IAAII,OAAO,CAACC,UAAU,EAAE;IACtBL,IAAI,CAACM,YAAY,GAAG,IAAI;EAC1B;EACA,IAAIF,OAAO,CAACG,gBAAgB,EAAE;IAC5BP,IAAI,CAACQ,OAAO,GAAG,IAAI;EACrB;EACA,IAAIJ,OAAO,CAACK,QAAQ,EAAE;IACpBT,IAAI,CAACS,QAAQ,GAAG,IAAI;EACtB;EACA,IAAIL,OAAO,CAACT,aAAa,EAAE;IACzBe,kBAAkB,CAACN,OAAO,CAACT,aAAa,EAAEK,IAAI,CAAC;EACjD;EACA,IAAII,OAAO,CAACO,OAAO,EAAE;IACnBC,YAAY,CAACR,OAAO,CAACO,OAAO,EAAEX,IAAI,CAAC;EACrC;EACA,IAAII,OAAO,CAACS,OAAO,EAAE;IACnBb,IAAI,CAACE,aAAa,GAAG,IAAI;EAC3B;EACA,IAAIE,OAAO,CAACH,gBAAgB,EAAE;IAC5BD,IAAI,CAACC,gBAAgB,GAAG,IAAI;EAC9B;EACA,IAAI,CAACG,OAAO,CAACD,gBAAgB,EAAE;IAC7BH,IAAI,CAACG,gBAAgB,GAAG,KAAK;EAC/B;EACA,OAAOH,IAAI;AACb;AAEO,SAASc,gBAAgBA,CAACC,eAAyB,EAAsB;EAAA,IAAAC,MAAA;EAC9E,MAAMjB,OAAO,GAAG,IAAIkB,kBAAO,CAAC,CAAC;EAC7BlB,OAAO,CAACZ,IAAI,CAAC,UAAU,CAAC,CAAC+B,WAAW,CAAC,+BAA+B,CAAC,CACnEC,OAAO,CAAC,OAAO,CAAC;EAClBpB,OAAO,CACLqB,MAAM,CAAC,kBAAkB,EAAE,8BAA8B,CAAC,CAC1DA,MAAM,CAAC,aAAa,EAAE,wCAAwC,CAAC,CAC/DA,MAAM,CAAC,sBAAsB,EAAE,mBAAmB,CAAC,CACnDA,MAAM,CAAC,8BAA8B,EAAE,gCAAgC,CAAC,CACxEA,MAAM,CAAC,mCAAmC,EAAE,6CAA6C,EAAE1B,gBAAgB,EAAE,EAAE,CAAC,CAChH0B,MAAM,CAAC,WAAW,EAAE,4CAA4C,CAAC,CACjEA,MAAM,CAAC,oBAAoB,EAAE,gBAAgB,CAAC,CAC9CC,SAAS,CAAC,IAAIC,iBAAM,CAAC,sBAAsB,EAAE,0BAA0B,CAAC,CAACC,QAAQ,CAAC,IAAI,CAAC,CAAC;EAC1FxB,OAAO,CAACyB,QAAQ,CAAC,cAAc,EAAE,sBAAsB,EAAE/C,UAAU,CAAC;EAEpEF,UAAU,GAAG,EAAE;EACf;EACA,IAAIkD,OAAiB,GAAG,CAAC,OAAO,EAAE,OAAO,CAAC;EAC1CA,OAAO,CAAC7C,IAAI,CAAC,GAAGmC,eAAe,CAAC;EAChChB,OAAO,CAAC2B,KAAK,CAACD,OAAO,CAAC;EACtB,IAAIjD,YAAY,KAAK,EAAE,EAAE;IACvB,IAAI;MACFuC,eAAe,GAAGpE,EAAE,CAClBgF,YAAY,CAACnD,YAAY,CAACoD,KAAK,CAAC,CAAC,CAAC,CAAC,CACnCC,QAAQ,CAAC,CAAC,CACVC,KAAK,CAAC,IAAI,CAAC,CACXC,MAAM,CAAC,UAAChF,CAAC,EAAK;QAAAmB,cAAA,OAAA8C,MAAA;QACZ,OAAOjE,CAAC,CAACiF,OAAO,CAAC,CAAC;MACpB,CAAC,CAAAvC,IAAA,OAAC;MACJgC,OAAO,GAAG,CAAC,OAAO,EAAE,OAAO,CAAC;MAC5BA,OAAO,CAAC7C,IAAI,CAAC,GAAGmC,eAAe,CAAC;MAChChB,OAAO,CAAC2B,KAAK,CAACD,OAAO,CAAC;IACxB,CAAC,CAAC,OAAOQ,KAAK,EAAE;MACdC,cAAM,CAACD,KAAK,CAAC,gCAAgC,GAAGA,KAAK,CAAC;MACtDE,OAAO,CAACC,IAAI,CAAC,CAAC,CAAC,CAAC;IAClB;EACF;EAEA,OAAOtC,sBAAsB,CAACC,OAAO,CAAC;AACxC;AAEA,SAASW,kBAAkBA,CAAC2B,UAAoB,EAAErC,IAAwB,EAAQ;EAChF,KAAK,IAAIhC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGqE,UAAU,CAACnD,MAAM,EAAElB,CAAC,EAAE,EAAE;IAC1C,MAAMsE,aAAa,GAAGD,UAAU,CAACrE,CAAC,CAAC;IACnC,IAAI;MACFgC,IAAI,CAACzB,UAAU,CAACK,IAAI,CAAC,GAAGC,SAAQ,CAACyD,aAAa,CAAC,CAAC;IAClD,CAAC,CAAC,OAAOL,KAAK,EAAE;MACdC,cAAM,CAACD,KAAK,CAAC,yBAAyB,GAAGA,KAAK,CAAC;MAC/CE,OAAO,CAACC,IAAI,CAAC,CAAC,CAAC,CAAC;IAClB;EACF;AACF;AAEA,SAASxB,YAAYA,CAAC2B,OAAe,EAAEvC,IAAwB,EAAQ;EAAA,IAAAwC,MAAA;EACrE;EACA,MAAMC,UAAU,GAAGF,OAAO;EAE1B,MAAMG,IAA4B,GAAGjG,EAAE,CAACkG,GAAyC;EAEjF,MAAMC,WAA4B,GAAG,EAAE;EAEvC,IAAI;IACF,MAAMC,0BAA0B,GAAGH,IAAI,CAACI,mCAAmC;IAC3EJ,IAAI,CAACI,mCAAmC,GAAG,UAACC,UAAyB,EAAW;MAAA7E,cAAA,OAAAsE,MAAA;MAC9EI,WAAW,CAAChE,IAAI,CAACmE,UAAU,CAAC;IAC9B,CAAC,CAAAtD,IAAA;IACDO,IAAI,CAACgD,gBAAgB,GAAGvG,EAAE,CAACwG,gCAAgC,CAACR,UAAU,EAAE,CAAC,CAAC,EAAEC,IAAI,CAAC;IACjFA,IAAI,CAACI,mCAAmC,GAAGD,0BAA0B;IAErE,IAAI7C,IAAI,CAACgD,gBAAgB,EAAE;MACzBJ,WAAW,CAAChE,IAAI,CAAC,GAAGnC,EAAE,CAACyG,+BAA+B,CAAClD,IAAI,CAACgD,gBAAgB,CAAC,CAAC;IAChF;IAEA,IAAIJ,WAAW,CAAC1D,MAAM,GAAG,CAAC,EAAE;MAC1B;MACAgD,cAAM,CAACD,KAAK,CAAC,6BAA6B,CAAC;MAC3C,IAAAkB,kCAAgB,EAACP,WAAW,EAAEV,cAAM,CAACkB,IAAI,CAAC;MAC1CjB,OAAO,CAACC,IAAI,CAAC,CAAC,CAAC,CAAC;IAClB;EACF,CAAC,CAAC,OAAOH,KAAK,EAAE;IACdC,cAAM,CAACD,KAAK,CAAC,8BAA8B,GAAGA,KAAK,CAAC;IACpDE,OAAO,CAACC,IAAI,CAAC,CAAC,CAAC,CAAC;EAClB;AACF","ignoreList":[]}
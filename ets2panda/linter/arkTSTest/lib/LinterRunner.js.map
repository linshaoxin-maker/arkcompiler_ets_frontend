{"version":3,"file":"LinterRunner.js","names":["_TypeScriptLinter","require","_InteropTypescriptLinter","_Problems","_FaultDesc","_FaultAttrs","path","_interopRequireWildcard","_MergeArrayMaps","_GetTscDiagnostics","_TransformTscDiagnostics","_ArktsIgnorePaths","_PathHelper","_ProblemSeverity","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","_newArrowCheck","TypeError","prepareInputFilesList","cmdOptions","_this","inputFiles","parsedConfigFile","fileNames","length","cmdInputsResolvedPaths","map","x","resolve","bind","configInputsResolvedPaths","filter","_this2","some","y","countProblems","linter","errorNodesTotal","warningNodes","FaultID","LAST_ID","faultsAttrs","severity","ProblemSeverity","ERROR","nodeCounters","WARNING","lint","options","_this3","cancellationToken","tscCompiledProgram","tsProgram","getProgram","input","shouldProcessFile","srcFiles","inputFile","srcFile","getSourceFile","push","tscStrictDiagnostics","getTscDiagnostics","isEtsFile","TypeScriptLinter","getTypeChecker","enableAutofix","enableUseRtLogic","incrementalLintInfo","reportAutofixCb","isEtsFileCb","InteropTypescriptLinter","getCompilerOptions","errorNodes","problemsInfos","lintFiles","consoleLog","logTotalProblemsInfo","logProblemsPercentageByFeatures","mergeArrayMaps","transformTscDiagnostics","problemFiles","Map","prevVisitedNodes","totalVisitedNodes","prevErrorLines","totalErrorLines","prevWarningLines","totalWarningLines","errorLineNumbersString","warningLineNumbersString","normalize","fileName","fileVisitedNodes","fileErrorLines","fileWarningLines","countProblemFiles","filesNumber","tsSrcFile","fileNodes","nodeCounterDiff","errorRate","toFixed","warningRate","nodes","lines","lineCounters","pecentage","padEnd","faultDesc","fileFsPath","_this4","ARKTS_IGNORE_FILES","ignore","basename","ARKTS_IGNORE_DIRS_NO_OH_MODULES","pathContainsDirectory","ARKTS_IGNORE_DIRS_OH_MODULES","isFileFromModuleCb"],"sources":["../../lib/LinterRunner.ts"],"sourcesContent":["/*\n * Copyright (c) 2022-2024 Huawei Device Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type * as ts from 'typescript';\nimport type { ProblemInfo } from './ProblemInfo';\nimport { TypeScriptLinter, consoleLog } from './TypeScriptLinter';\nimport { InteropTypescriptLinter } from './InteropTypescriptLinter';\nimport { FaultID } from './Problems';\nimport { faultDesc } from './FaultDesc';\nimport { faultsAttrs } from './FaultAttrs';\nimport type { LintRunResult } from './LintRunResult';\nimport * as path from 'node:path';\nimport type { LintOptions } from './LintOptions';\nimport type { CommandLineOptions } from './CommandLineOptions';\nimport { mergeArrayMaps } from './utils/functions/MergeArrayMaps';\nimport { getTscDiagnostics } from './ts-diagnostics/GetTscDiagnostics';\nimport { transformTscDiagnostics } from './ts-diagnostics/TransformTscDiagnostics';\nimport {\n  ARKTS_IGNORE_DIRS_NO_OH_MODULES,\n  ARKTS_IGNORE_DIRS_OH_MODULES,\n  ARKTS_IGNORE_FILES\n} from './utils/consts/ArktsIgnorePaths';\nimport { pathContainsDirectory } from './utils/functions/PathHelper';\nimport { ProblemSeverity } from './ProblemSeverity';\n\nfunction prepareInputFilesList(cmdOptions: CommandLineOptions): string[] {\n  let inputFiles = cmdOptions.inputFiles;\n  if (cmdOptions.parsedConfigFile) {\n    inputFiles = cmdOptions.parsedConfigFile.fileNames;\n    if (cmdOptions.inputFiles.length > 0) {\n\n      /*\n       * Apply linter only to the project source files that are specified\n       * as a command-line arguments. Other source files will be discarded.\n       */\n      const cmdInputsResolvedPaths = cmdOptions.inputFiles.map((x) => {\n        return path.resolve(x);\n      });\n      const configInputsResolvedPaths = inputFiles.map((x) => {\n        return path.resolve(x);\n      });\n      inputFiles = configInputsResolvedPaths.filter((x) => {\n        return cmdInputsResolvedPaths.some((y) => {\n          return x === y;\n        });\n      });\n    }\n  }\n\n  return inputFiles;\n}\n\nfunction countProblems(linter: TypeScriptLinter | InteropTypescriptLinter): [number, number] {\n  let errorNodesTotal = 0;\n  let warningNodes = 0;\n  for (let i = 0; i < FaultID.LAST_ID; i++) {\n    switch (faultsAttrs[i].severity) {\n      case ProblemSeverity.ERROR:\n        errorNodesTotal += linter.nodeCounters[i];\n        break;\n      case ProblemSeverity.WARNING:\n        warningNodes += linter.nodeCounters[i];\n        break;\n    }\n  }\n\n  return [errorNodesTotal, warningNodes];\n}\n\nexport function lint(options: LintOptions): LintRunResult {\n  const cmdOptions = options.cmdOptions;\n  const cancellationToken = options.cancellationToken;\n  const tscCompiledProgram = options.tscCompiledProgram;\n  const tsProgram = tscCompiledProgram.getProgram();\n\n  // Prepare list of input files for linter and retrieve AST for those files.\n  let inputFiles = prepareInputFilesList(cmdOptions);\n  inputFiles = inputFiles.filter((input) => {\n    return shouldProcessFile(options, input);\n  });\n  const srcFiles: ts.SourceFile[] = [];\n  for (const inputFile of inputFiles) {\n    const srcFile = tsProgram.getSourceFile(inputFile);\n    if (srcFile) {\n      srcFiles.push(srcFile);\n    }\n  }\n\n  const tscStrictDiagnostics = getTscDiagnostics(tscCompiledProgram, srcFiles);\n  const linter = options.isEtsFile ?\n    new TypeScriptLinter(\n      tsProgram.getTypeChecker(),\n      cmdOptions.enableAutofix,\n      !!cmdOptions.enableUseRtLogic,\n      cancellationToken,\n      options.incrementalLintInfo,\n      tscStrictDiagnostics,\n      options.reportAutofixCb,\n      options.isEtsFileCb\n    ) :\n    new InteropTypescriptLinter(\n      tsProgram.getTypeChecker(),\n      tsProgram.getCompilerOptions(),\n      options.incrementalLintInfo,\n      !!cmdOptions.enableUseRtLogic\n    );\n  const { errorNodes, problemsInfos } = lintFiles(srcFiles, linter);\n  consoleLog('\\n\\n\\nFiles scanned: ', srcFiles.length);\n  consoleLog('\\nFiles with problems: ', errorNodes);\n\n  const [errorNodesTotal, warningNodes] = countProblems(linter);\n\n  logTotalProblemsInfo(errorNodesTotal, warningNodes, linter);\n  logProblemsPercentageByFeatures(linter);\n  return {\n    errorNodes: errorNodesTotal,\n    problemsInfos: mergeArrayMaps(problemsInfos, transformTscDiagnostics(tscStrictDiagnostics))\n  };\n}\n\nfunction lintFiles(srcFiles: ts.SourceFile[], linter: TypeScriptLinter | InteropTypescriptLinter): LintRunResult {\n  let problemFiles = 0;\n  const problemsInfos: Map<string, ProblemInfo[]> = new Map();\n\n  for (const srcFile of srcFiles) {\n    const prevVisitedNodes = linter.totalVisitedNodes;\n    const prevErrorLines = linter.totalErrorLines;\n    const prevWarningLines = linter.totalWarningLines;\n    linter.errorLineNumbersString = '';\n    linter.warningLineNumbersString = '';\n    const nodeCounters: number[] = [];\n\n    for (let i = 0; i < FaultID.LAST_ID; i++) {\n      nodeCounters[i] = linter.nodeCounters[i];\n    }\n\n    linter.lint(srcFile);\n    // save results and clear problems array\n    problemsInfos.set(path.normalize(srcFile.fileName), [...linter.problemsInfos]);\n    linter.problemsInfos.length = 0;\n\n    // print results for current file\n    const fileVisitedNodes = linter.totalVisitedNodes - prevVisitedNodes;\n    const fileErrorLines = linter.totalErrorLines - prevErrorLines;\n    const fileWarningLines = linter.totalWarningLines - prevWarningLines;\n\n    problemFiles = countProblemFiles(\n      nodeCounters,\n      problemFiles,\n      srcFile,\n      fileVisitedNodes,\n      fileErrorLines,\n      fileWarningLines,\n      linter\n    );\n  }\n\n  return {\n    errorNodes: problemFiles,\n    problemsInfos: problemsInfos\n  };\n}\n\nfunction countProblemFiles(\n  nodeCounters: number[],\n  filesNumber: number,\n  tsSrcFile: ts.SourceFile,\n  fileNodes: number,\n  fileErrorLines: number,\n  fileWarningLines: number,\n  linter: TypeScriptLinter | InteropTypescriptLinter\n): number {\n  let errorNodes = 0;\n  let warningNodes = 0;\n  for (let i = 0; i < FaultID.LAST_ID; i++) {\n    const nodeCounterDiff = linter.nodeCounters[i] - nodeCounters[i];\n    switch (faultsAttrs[i].severity) {\n      case ProblemSeverity.ERROR:\n        errorNodes += nodeCounterDiff;\n        break;\n      case ProblemSeverity.WARNING:\n        warningNodes += nodeCounterDiff;\n        break;\n    }\n  }\n  if (errorNodes > 0) {\n    filesNumber++;\n    const errorRate = (errorNodes / fileNodes * 100).toFixed(2);\n    const warningRate = (warningNodes / fileNodes * 100).toFixed(2);\n    consoleLog(tsSrcFile.fileName, ': ', '\\n\\tError lines: ', linter.errorLineNumbersString);\n    consoleLog(tsSrcFile.fileName, ': ', '\\n\\tWarning lines: ', linter.warningLineNumbersString);\n    consoleLog(\n      '\\n\\tError constructs (%): ',\n      errorRate,\n      '\\t[ of ',\n      fileNodes,\n      ' constructs ], \\t',\n      fileErrorLines,\n      ' lines'\n    );\n    consoleLog(\n      '\\n\\tWarning constructs (%): ',\n      warningRate,\n      '\\t[ of ',\n      fileNodes,\n      ' constructs ], \\t',\n      fileWarningLines,\n      ' lines'\n    );\n  }\n\n  return filesNumber;\n}\n\nfunction logTotalProblemsInfo(\n  errorNodes: number,\n  warningNodes: number,\n  linter: TypeScriptLinter | InteropTypescriptLinter\n): void {\n  const errorRate = (errorNodes / linter.totalVisitedNodes * 100).toFixed(2);\n  const warningRate = (warningNodes / linter.totalVisitedNodes * 100).toFixed(2);\n  consoleLog('\\nTotal error constructs (%): ', errorRate);\n  consoleLog('\\nTotal warning constructs (%): ', warningRate);\n  consoleLog('\\nTotal error lines:', linter.totalErrorLines, ' lines\\n');\n  consoleLog('\\nTotal warning lines:', linter.totalWarningLines, ' lines\\n');\n}\n\nfunction logProblemsPercentageByFeatures(linter: TypeScriptLinter | InteropTypescriptLinter): void {\n  consoleLog('\\nPercent by features: ');\n  for (let i = 0; i < FaultID.LAST_ID; i++) {\n    const nodes = linter.nodeCounters[i];\n    const lines = linter.lineCounters[i];\n    const pecentage = (nodes / linter.totalVisitedNodes * 100).toFixed(2).padEnd(7, ' ');\n\n    consoleLog(faultDesc[i].padEnd(55, ' '), pecentage, '[', nodes, ' constructs / ', lines, ' lines]');\n  }\n}\n\nfunction shouldProcessFile(options: LintOptions, fileFsPath: string): boolean {\n  if (\n    ARKTS_IGNORE_FILES.some((ignore) => {\n      return path.basename(fileFsPath) === ignore;\n    })\n  ) {\n    return false;\n  }\n\n  if (\n    ARKTS_IGNORE_DIRS_NO_OH_MODULES.some((ignore) => {\n      return pathContainsDirectory(path.resolve(fileFsPath), ignore);\n    })\n  ) {\n    return false;\n  }\n\n  return (\n    !pathContainsDirectory(path.resolve(fileFsPath), ARKTS_IGNORE_DIRS_OH_MODULES) ||\n    !!options.isFileFromModuleCb?.(fileFsPath)\n  );\n}\n"],"mappings":"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","ignoreList":[]}
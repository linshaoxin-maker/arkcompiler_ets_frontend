{"version":3,"file":"LibraryTypeCallDiagnosticChecker.js","names":["TYPE_0_IS_NOT_ASSIGNABLE_TO_TYPE_1_ERROR_CODE","exports","TYPE_UNKNOWN_IS_NOT_ASSIGNABLE_TO_TYPE_1_RE","TYPE_NULL_IS_NOT_ASSIGNABLE_TO_TYPE_1_RE","TYPE_UNDEFINED_IS_NOT_ASSIGNABLE_TO_TYPE_1_RE","ARGUMENT_OF_TYPE_0_IS_NOT_ASSIGNABLE_TO_PARAMETER_OF_TYPE_1_ERROR_CODE","OBJECT_IS_POSSIBLY_UNDEFINED_ERROR_CODE","NO_OVERLOAD_MATCHES_THIS_CALL_ERROR_CODE","ARGUMENT_OF_TYPE_NULL_IS_NOT_ASSIGNABLE_TO_PARAMETER_OF_TYPE_1_RE","ARGUMENT_OF_TYPE_UNDEFINED_IS_NOT_ASSIGNABLE_TO_PARAMETER_OF_TYPE_1_RE","LibraryTypeCallDiagnosticChecker","constructor","filteredDiagnosticMessages","_defineProperty","configure","inLibCall","diagnosticMessages","checkMessageText","msg","match","checkMessageChain","chain","code","messageText","next","undefined","checkFilteredDiagnosticMessages","msgText","size","has","msgChain","curMsg","curFilteredMsg","checkDiagnosticMessage","push"],"sources":["../../../../lib/utils/functions/LibraryTypeCallDiagnosticChecker.ts"],"sourcesContent":["/*\n * Copyright (c) 2023-2024 Huawei Device Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type * as ts from 'typescript';\nimport type { DiagnosticChecker } from './DiagnosticChecker';\n\n/*\n * Current approach relates on error code and error message matching and it is quite fragile,\n * so this place should be checked thoroughly in the case of typescript upgrade\n */\nexport const TYPE_0_IS_NOT_ASSIGNABLE_TO_TYPE_1_ERROR_CODE = 2322;\nexport const TYPE_UNKNOWN_IS_NOT_ASSIGNABLE_TO_TYPE_1_RE =\n  /^Type '(.*)\\bunknown\\b(.*)' is not assignable to type '.*'\\.$/;\nexport const TYPE_NULL_IS_NOT_ASSIGNABLE_TO_TYPE_1_RE = /^Type '(.*)\\bnull\\b(.*)' is not assignable to type '.*'\\.$/;\nexport const TYPE_UNDEFINED_IS_NOT_ASSIGNABLE_TO_TYPE_1_RE =\n  /^Type '(.*)\\bundefined\\b(.*)' is not assignable to type '.*'\\.$/;\n\nexport const ARGUMENT_OF_TYPE_0_IS_NOT_ASSIGNABLE_TO_PARAMETER_OF_TYPE_1_ERROR_CODE = 2345;\nexport const OBJECT_IS_POSSIBLY_UNDEFINED_ERROR_CODE = 2532;\nexport const NO_OVERLOAD_MATCHES_THIS_CALL_ERROR_CODE = 2769;\nexport const ARGUMENT_OF_TYPE_NULL_IS_NOT_ASSIGNABLE_TO_PARAMETER_OF_TYPE_1_RE =\n  /^Argument of type '(.*)\\bnull\\b(.*)' is not assignable to parameter of type '.*'\\.$/;\nexport const ARGUMENT_OF_TYPE_UNDEFINED_IS_NOT_ASSIGNABLE_TO_PARAMETER_OF_TYPE_1_RE =\n  /^Argument of type '(.*)\\bundefined\\b(.*)' is not assignable to parameter of type '.*'\\.$/;\n\nexport class LibraryTypeCallDiagnosticChecker implements DiagnosticChecker {\n  inLibCall: boolean = false;\n  diagnosticMessages: Array<ts.DiagnosticMessageChain> | undefined;\n  filteredDiagnosticMessages: Set<ts.DiagnosticMessageChain>;\n\n  constructor(filteredDiagnosticMessages: Set<ts.DiagnosticMessageChain>) {\n    this.filteredDiagnosticMessages = filteredDiagnosticMessages;\n  }\n\n  configure(inLibCall: boolean, diagnosticMessages: Array<ts.DiagnosticMessageChain>): void {\n    this.inLibCall = inLibCall;\n    this.diagnosticMessages = diagnosticMessages;\n  }\n\n  checkMessageText(msg: string): boolean {\n    if (this.inLibCall) {\n      const match =\n        msg.match(ARGUMENT_OF_TYPE_NULL_IS_NOT_ASSIGNABLE_TO_PARAMETER_OF_TYPE_1_RE) ||\n        msg.match(ARGUMENT_OF_TYPE_UNDEFINED_IS_NOT_ASSIGNABLE_TO_PARAMETER_OF_TYPE_1_RE) ||\n        msg.match(TYPE_UNDEFINED_IS_NOT_ASSIGNABLE_TO_TYPE_1_RE) ||\n        msg.match(TYPE_NULL_IS_NOT_ASSIGNABLE_TO_TYPE_1_RE);\n      return !match;\n    }\n    return true;\n  }\n\n  checkMessageChain(chain: ts.DiagnosticMessageChain): boolean {\n    if (chain.code === TYPE_0_IS_NOT_ASSIGNABLE_TO_TYPE_1_ERROR_CODE) {\n      if (chain.messageText.match(TYPE_UNKNOWN_IS_NOT_ASSIGNABLE_TO_TYPE_1_RE)) {\n        return false;\n      }\n      if (this.inLibCall && chain.messageText.match(TYPE_UNDEFINED_IS_NOT_ASSIGNABLE_TO_TYPE_1_RE)) {\n        return false;\n      }\n      if (this.inLibCall && chain.messageText.match(TYPE_NULL_IS_NOT_ASSIGNABLE_TO_TYPE_1_RE)) {\n        return false;\n      }\n    }\n    if (chain.code === ARGUMENT_OF_TYPE_0_IS_NOT_ASSIGNABLE_TO_PARAMETER_OF_TYPE_1_ERROR_CODE) {\n      if (\n        this.inLibCall &&\n        chain.messageText.match(ARGUMENT_OF_TYPE_UNDEFINED_IS_NOT_ASSIGNABLE_TO_PARAMETER_OF_TYPE_1_RE)\n      ) {\n        return false;\n      }\n      if (\n        this.inLibCall &&\n        chain.messageText.match(ARGUMENT_OF_TYPE_NULL_IS_NOT_ASSIGNABLE_TO_PARAMETER_OF_TYPE_1_RE)\n      ) {\n        return false;\n      }\n    }\n    return chain.next === undefined ? true : this.checkMessageChain(chain.next[0]);\n  }\n\n  checkFilteredDiagnosticMessages(msgText: ts.DiagnosticMessageChain | string): boolean {\n    if (this.filteredDiagnosticMessages.size === 0) {\n      return true;\n    }\n\n    if (typeof msgText !== 'string' && this.filteredDiagnosticMessages.has(msgText)) {\n      return false;\n    }\n\n    for (const msgChain of this.filteredDiagnosticMessages) {\n      if (typeof msgText == 'string') {\n        if (msgText === msgChain.messageText) {\n          return false;\n        }\n        continue;\n      }\n\n      let curMsg: ts.DiagnosticMessageChain | undefined = msgText;\n      let curFilteredMsg: ts.DiagnosticMessageChain | undefined = msgChain;\n      while (curMsg) {\n        if (!curFilteredMsg) {\n          return true;\n        }\n\n        if (curMsg.code !== curFilteredMsg.code) {\n          return true;\n        }\n\n        if (curMsg.messageText !== curFilteredMsg.messageText) {\n          return true;\n        }\n\n        curMsg = curMsg.next ? curMsg.next[0] : undefined;\n        curFilteredMsg = curFilteredMsg.next ? curFilteredMsg.next[0] : undefined;\n      }\n\n      return false;\n    }\n    return true;\n  }\n\n  checkDiagnosticMessage(msgText: string | ts.DiagnosticMessageChain): boolean {\n    if (!this.diagnosticMessages) {\n      return false;\n    }\n\n    if (this.inLibCall && !this.checkFilteredDiagnosticMessages(msgText)) {\n      return false;\n    }\n\n    if (typeof msgText == 'string') {\n      return this.checkMessageText(msgText);\n    }\n\n    if (!this.checkMessageChain(msgText)) {\n      this.diagnosticMessages.push(msgText);\n      return false;\n    }\n    return true;\n  }\n}\n"],"mappings":"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","ignoreList":[]}
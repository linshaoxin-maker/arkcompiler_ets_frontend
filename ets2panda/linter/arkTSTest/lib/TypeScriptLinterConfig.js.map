{"version":3,"file":"TypeScriptLinterConfig.js","names":["ts","_interopRequireWildcard","require","_Problems","_LinterConfig","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","_defineProperty","_toPropertyKey","value","enumerable","configurable","writable","_toPrimitive","Symbol","toPrimitive","TypeError","String","Number","LinterConfig","initTsSyntaxKindNames","keys","SyntaxKind","values","length","val","kindNum","parseInt","tsSyntaxKindNames","exports","Set","CloseBracketToken","OpenBracketToken","CloseParenToken","OpenParenToken","CloseBraceToken","OpenBraceToken","CommaToken","SemicolonToken","QuestionDotToken","DotDotDotToken","DotToken","MinusMinusToken","PlusPlusToken","PercentToken","SlashToken","AsteriskAsteriskToken","AsteriskToken","MinusToken","PlusToken","EqualsGreaterThanToken","ExclamationEqualsEqualsToken","ExclamationEqualsToken","EqualsEqualsToken","EqualsEqualsEqualsToken","GreaterThanEqualsToken","LessThanEqualsToken","GreaterThanGreaterThanGreaterThanToken","GreaterThanGreaterThanToken","GreaterThanToken","LessThanSlashToken","LessThanToken","LessThanLessThanToken","HashToken","BacktickToken","AtToken","ColonToken","QuestionToken","QuestionQuestionToken","BarBarToken","AmpersandAmpersandToken","TildeToken","ExclamationToken","CaretToken","BarToken","AmpersandToken","CaretEqualsToken","BarEqualsToken","AmpersandEqualsToken","GreaterThanGreaterThanGreaterThanEqualsToken","GreaterThanGreaterThanEqualsToken","LessThanLessThanEqualsToken","PercentEqualsToken","SlashEqualsToken","AsteriskAsteriskEqualsToken","AsteriskEqualsToken","MinusEqualsToken","PlusEqualsToken","EqualsToken","MultiLineCommentTrivia","SingleLineCommentTrivia","WhitespaceTrivia","NewLineTrivia","EndOfFileToken","ConflictMarkerTrivia","ShebangTrivia","Map","AnyKeyword","FaultID","AnyType","SymbolKeyword","SymbolType","ThisType","TypeQuery","DeleteExpression","DeleteOperator","TypePredicate","IsOperator","YieldExpression","WithStatement","IndexedAccessType","UnknownKeyword","UnknownType","CallSignature","IntersectionType","ConstructorType","ConstructorFuncs","ConditionalType","MappedType","JsxElement","JsxSelfClosingElement","ImportEqualsDeclaration","ImportAssignment","NamespaceExportDeclaration","UMDModuleDefinition","ClassExpression"],"sources":["../../lib/TypeScriptLinterConfig.ts"],"sourcesContent":["/*\n * Copyright (c) 2022-2024 Huawei Device Co., Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as ts from 'typescript';\nimport { FaultID } from './Problems';\n\nexport class LinterConfig {\n\n  /*\n   * The SyntaxKind enum defines additional elements at the end of the enum\n   * that serve as markers (FirstX/LastX). Those elements are initialized\n   * with indices of the previously defined elements. As result, the enum\n   * may return incorrect name for a certain kind index (e.g. 'FirstStatement'\n   * instead of 'VariableStatement').\n   * The following code creates a map with correct syntax kind names.\n   * It can be used when need to print name of syntax kind of certain\n   * AST node in diagnostic messages.\n   */\n  static tsSyntaxKindNames: string[] = [];\n\n  static {\n    LinterConfig.initTsSyntaxKindNames();\n  }\n\n  private static initTsSyntaxKindNames(): void {\n    const keys = Object.keys(ts.SyntaxKind);\n    const values = Object.values(ts.SyntaxKind);\n\n    for (let i = 0; i < values.length; i++) {\n      const val = values[i];\n      const kindNum = typeof val === 'string' ? parseInt(val) : val;\n      if (kindNum && !LinterConfig.tsSyntaxKindNames[kindNum]) {\n        LinterConfig.tsSyntaxKindNames[kindNum] = keys[i];\n      }\n    }\n  }\n\n  // must detect terminals during parsing\n  static terminalTokens: Set<ts.SyntaxKind> = new Set([\n    ts.SyntaxKind.CloseBracketToken,\n    ts.SyntaxKind.OpenBracketToken,\n    ts.SyntaxKind.CloseParenToken,\n    ts.SyntaxKind.OpenParenToken,\n    ts.SyntaxKind.CloseBraceToken,\n    ts.SyntaxKind.OpenBraceToken,\n    ts.SyntaxKind.CommaToken,\n    ts.SyntaxKind.SemicolonToken,\n    ts.SyntaxKind.QuestionDotToken,\n    ts.SyntaxKind.DotDotDotToken,\n    ts.SyntaxKind.DotToken,\n    ts.SyntaxKind.MinusMinusToken,\n    ts.SyntaxKind.PlusPlusToken,\n    ts.SyntaxKind.PercentToken,\n    ts.SyntaxKind.SlashToken,\n    ts.SyntaxKind.AsteriskAsteriskToken,\n    ts.SyntaxKind.AsteriskToken,\n    ts.SyntaxKind.MinusToken,\n    ts.SyntaxKind.PlusToken,\n    ts.SyntaxKind.EqualsGreaterThanToken,\n    ts.SyntaxKind.ExclamationEqualsEqualsToken,\n    ts.SyntaxKind.ExclamationEqualsToken,\n    ts.SyntaxKind.EqualsEqualsToken,\n    ts.SyntaxKind.EqualsEqualsEqualsToken,\n    ts.SyntaxKind.GreaterThanEqualsToken,\n    ts.SyntaxKind.LessThanEqualsToken,\n    ts.SyntaxKind.GreaterThanGreaterThanGreaterThanToken,\n    ts.SyntaxKind.GreaterThanGreaterThanToken,\n    ts.SyntaxKind.GreaterThanToken,\n    ts.SyntaxKind.LessThanSlashToken,\n    ts.SyntaxKind.LessThanToken,\n    ts.SyntaxKind.LessThanLessThanToken,\n    ts.SyntaxKind.HashToken,\n    ts.SyntaxKind.BacktickToken,\n    ts.SyntaxKind.AtToken,\n    ts.SyntaxKind.ColonToken,\n    ts.SyntaxKind.QuestionToken,\n    ts.SyntaxKind.QuestionQuestionToken,\n    ts.SyntaxKind.BarBarToken,\n    ts.SyntaxKind.AmpersandAmpersandToken,\n    ts.SyntaxKind.TildeToken,\n    ts.SyntaxKind.ExclamationToken,\n    ts.SyntaxKind.CaretToken,\n    ts.SyntaxKind.BarToken,\n    ts.SyntaxKind.AmpersandToken,\n    ts.SyntaxKind.CaretEqualsToken,\n    ts.SyntaxKind.BarEqualsToken,\n    ts.SyntaxKind.AmpersandEqualsToken,\n    ts.SyntaxKind.GreaterThanGreaterThanGreaterThanEqualsToken,\n    ts.SyntaxKind.GreaterThanGreaterThanEqualsToken,\n    ts.SyntaxKind.LessThanLessThanEqualsToken,\n    ts.SyntaxKind.PercentEqualsToken,\n    ts.SyntaxKind.SlashEqualsToken,\n    ts.SyntaxKind.AsteriskAsteriskEqualsToken,\n    ts.SyntaxKind.AsteriskEqualsToken,\n    ts.SyntaxKind.MinusEqualsToken,\n    ts.SyntaxKind.PlusEqualsToken,\n    ts.SyntaxKind.EqualsToken,\n    ts.SyntaxKind.MultiLineCommentTrivia,\n    ts.SyntaxKind.SingleLineCommentTrivia,\n    ts.SyntaxKind.WhitespaceTrivia,\n    ts.SyntaxKind.NewLineTrivia,\n    ts.SyntaxKind.EndOfFileToken,\n    ts.SyntaxKind.ConflictMarkerTrivia,\n    ts.SyntaxKind.ShebangTrivia\n  ]);\n\n  // tokens which can be reported without additional parsing\n  static incrementOnlyTokens: Map<ts.SyntaxKind, FaultID> = new Map([\n    [ts.SyntaxKind.AnyKeyword, FaultID.AnyType],\n    [ts.SyntaxKind.SymbolKeyword, FaultID.SymbolType],\n    [ts.SyntaxKind.ThisType, FaultID.ThisType],\n    [ts.SyntaxKind.TypeQuery, FaultID.TypeQuery],\n    [ts.SyntaxKind.DeleteExpression, FaultID.DeleteOperator],\n    [ts.SyntaxKind.TypePredicate, FaultID.IsOperator],\n    [ts.SyntaxKind.YieldExpression, FaultID.YieldExpression],\n    [ts.SyntaxKind.WithStatement, FaultID.WithStatement],\n    [ts.SyntaxKind.IndexedAccessType, FaultID.IndexedAccessType],\n    [ts.SyntaxKind.UnknownKeyword, FaultID.UnknownType],\n    [ts.SyntaxKind.CallSignature, FaultID.CallSignature],\n    [ts.SyntaxKind.IntersectionType, FaultID.IntersectionType],\n    [ts.SyntaxKind.ConstructorType, FaultID.ConstructorFuncs],\n    [ts.SyntaxKind.ConditionalType, FaultID.ConditionalType],\n    [ts.SyntaxKind.MappedType, FaultID.MappedType],\n    [ts.SyntaxKind.JsxElement, FaultID.JsxElement],\n    [ts.SyntaxKind.JsxSelfClosingElement, FaultID.JsxElement],\n    [ts.SyntaxKind.ImportEqualsDeclaration, FaultID.ImportAssignment],\n    [ts.SyntaxKind.NamespaceExportDeclaration, FaultID.UMDModuleDefinition],\n    [ts.SyntaxKind.ClassExpression, FaultID.ClassExpression]\n  ]);\n}\n"],"mappings":"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","ignoreList":[]}